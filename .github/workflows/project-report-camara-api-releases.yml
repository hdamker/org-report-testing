name: CAMARA API Releases

on:
  workflow_dispatch:
    inputs:
      include_prerelease:
        description: 'Include pre-releases in analysis and reports'
        required: false
        type: boolean
        default: false
      
      include_legacy:
        description: 'Include legacy releases in analysis and reports'
        required: false
        type: boolean
        default: false

jobs:
  generate-api-releases-report:
    runs-on: ubuntu-latest
    steps:
      - name: Initialize API Releases Report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const includePrerelease = '${{ github.event.inputs.include_prerelease }}' === 'true';
            const includeLegacy = '${{ github.event.inputs.include_legacy }}' === 'true';
            
            console.log('üöÄ Starting CAMARA API releases report for ' + org);
            console.log('üìÖ Report generation started at: ' + new Date().toISOString());
            console.log('‚öôÔ∏è Configuration: includePrerelease=' + includePrerelease + ', includeLegacy=' + includeLegacy);

      - name: Get API Repositories
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            
            console.log('üîç Getting API repositories from ' + org + '...');
            
            // Get all repositories
            const allRepos = [];
            let page = 1;
            
            while (true) {
              console.log('üì• Fetching repositories page ' + page + '...');
              const response = await github.rest.repos.listForOrg({
                org: org,
                type: 'all',
                sort: 'name',
                per_page: 100,
                page: page
              });
              
              if (response.data.length === 0) break;
              console.log('üìä Page ' + page + ': ' + response.data.length + ' repositories');
              allRepos.push(...response.data);
              page++;
            }
            
            console.log('üìã Filtering for API repositories...');
            
            // Filter for API repositories only
            const apiRepos = [];
            const nonArchivedRepos = allRepos.filter(r => !r.archived);
            
            for (const repo of nonArchivedRepos) {
              try {
                const topics = await github.rest.repos.getAllTopics({
                  owner: org,
                  repo: repo.name
                });
                
                const hasAPITopic = topics.data.names.some(topic => 
                  topic === 'sandbox-api-repository' || topic === 'incubating-api-repository'
                );
                
                if (hasAPITopic) {
                  const repoType = topics.data.names.includes('sandbox-api-repository') ? 'Sandbox' : 'Incubating';
                  apiRepos.push({
                    name: repo.name,
                    full_name: repo.full_name,
                    html_url: repo.html_url,
                    description: repo.description,
                    repo_type: repoType
                  });
                }
              } catch (error) {
                console.log('‚ö†Ô∏è Could not get topics for ' + repo.name + ': ' + error.message);
              }
            }
            
            console.log('‚úÖ Found ' + apiRepos.length + ' API repositories');
            
            // Save for next step
            const fs = require('fs');
            fs.writeFileSync('api-repositories.json', JSON.stringify({
              apiRepos: apiRepos,
              config: {
                org: org,
                includePrerelease: '${{ github.event.inputs.include_prerelease }}' === 'true',
                includeLegacy: '${{ github.event.inputs.include_legacy }}' === 'true'
              }
            }));

      - name: Analyze API Releases (Placeholder)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('api-repositories.json', 'utf8'));
            const { apiRepos, config } = data;
            const { org, includePrerelease, includeLegacy } = config;
            
            console.log('üîç Analyzing API releases...');
            console.log('üì¶ Processing ' + apiRepos.length + ' API repositories');
            
            // Placeholder analysis - to be expanded with full functionality
            const analysisResults = {
              repositoriesAnalyzed: apiRepos.length,
              repositoriesWithReleases: 0,
              repositoriesWithoutReleases: [],
              totalReleases: 0,
              metaReleaseSummary: {},
              recentReleases: []
            };
            
            // Basic analysis of each repository
            for (const repo of apiRepos) {
              console.log('üìã Analyzing ' + repo.name + ' (' + repo.repo_type + ')...');
              
              try {
                // Get releases
                const releases = await github.rest.repos.listReleases({
                  owner: org,
                  repo: repo.name,
                  per_page: 10
                });
                
                console.log('  üìä Found ' + releases.data.length + ' releases');
                
                if (releases.data.length === 0) {
                  analysisResults.repositoriesWithoutReleases.push({
                    name: repo.name,
                    repo_type: repo.repo_type,
                    html_url: repo.html_url
                  });
                } else {
                  analysisResults.repositoriesWithReleases++;
                  analysisResults.totalReleases += releases.data.length;
                  
                  // Check for recent releases (last 30 days)
                  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
                  const recentRepoReleases = releases.data.filter(release => 
                    new Date(release.published_at) > thirtyDaysAgo
                  );
                  
                  for (const release of recentRepoReleases) {
                    analysisResults.recentReleases.push({
                      repo: repo.name,
                      repo_type: repo.repo_type,
                      repo_url: repo.html_url,
                      tag_name: release.tag_name,
                      name: release.name,
                      published_at: release.published_at,
                      html_url: release.html_url,
                      prerelease: release.prerelease
                    });
                  }
                }
                
              } catch (error) {
                console.log('  ‚ùå Error analyzing ' + repo.name + ': ' + error.message);
                analysisResults.repositoriesWithoutReleases.push({
                  name: repo.name,
                  repo_type: repo.repo_type,
                  html_url: repo.html_url,
                  error: error.message
                });
              }
            }
            
            console.log('‚úÖ API analysis completed');
            console.log('üìä Results: ' + analysisResults.repositoriesWithReleases + ' repos with releases, ' + analysisResults.repositoriesWithoutReleases.length + ' without');
            
            // Save results
            data.analysisResults = analysisResults;
            fs.writeFileSync('api-analysis.json', JSON.stringify(data));

      - name: Generate API Releases Report
        id: generate-report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('api-analysis.json', 'utf8'));
            const { apiRepos, analysisResults, config } = data;
            const { org, includePrerelease, includeLegacy } = config;
            
            console.log('üìù Generating API releases report...');
            
            // Generate report
            let report = '# CAMARA API Releases Report\n\n';
            report += '**Generated**: ' + new Date().toISOString() + '\n';
            report += '**Organization**: ' + org + '\n';
            report += '**API Repositories Analyzed**: ' + analysisResults.repositoriesAnalyzed + '\n';
            report += '**Repositories with Releases**: ' + analysisResults.repositoriesWithReleases + '\n';
            report += '**Repositories without Releases**: ' + analysisResults.repositoriesWithoutReleases.length + '\n';
            report += '**Total Releases Found**: ' + analysisResults.totalReleases + '\n';
            report += '**Filters Applied**: Include Pre-releases: ' + (includePrerelease ? 'Yes' : 'No') + ', Include Legacy: ' + (includeLegacy ? 'Yes' : 'No') + '\n';
            report += '\n';
            
            report += '## Summary\n\n';
            report += 'This is a **placeholder version** of the CAMARA API Releases report. ';
            report += 'The full functionality will include:\n\n';
            report += '- Meta-release categorization (Fall24, Spring25, Fall25)\n';
            report += '- API version analysis and tracking\n';
            report += '- Release consistency checks\n';
            report += '- API definitions extraction and comparison\n';
            report += '- Comprehensive quality analysis\n\n';
            
            // Repository summary
            report += '## API Repository Summary\n\n';
            report += '| Repository | Type | Has Releases | Description |\n';
            report += '|------------|------|--------------|-------------|\n';
            
            for (const repo of apiRepos.sort((a, b) => a.name.localeCompare(b.name))) {
              const hasReleases = !analysisResults.repositoriesWithoutReleases.some(r => r.name === repo.name);
              const shortDesc = (repo.description || '').length > 60 ? 
                (repo.description || '').substring(0, 60) + '...' : 
                (repo.description || 'No description');
              
              report += '| [' + repo.name + '](' + repo.html_url + ') | ' + repo.repo_type + ' | ' + (hasReleases ? 'Yes ‚úÖ' : 'No ‚ùå') + ' | ' + shortDesc + ' |\n';
            }
            report += '\n';
            
            // Recent releases
            if (analysisResults.recentReleases.length > 0) {
              report += '## Recent Releases (Last 30 Days)\n\n';
              report += '| Repository | Type | Release | Date | Pre-release |\n';
              report += '|------------|------|---------|------|-------------|\n';
              
              analysisResults.recentReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
              
              for (const release of analysisResults.recentReleases) {
                const date = new Date(release.published_at).toLocaleDateString();
                const name = release.name || release.tag_name;
                const prerelease = release.prerelease ? 'Yes' : 'No';
                
                report += '| [' + release.repo + '](' + release.repo_url + ') | ' + release.repo_type + ' | [' + name + '](' + release.html_url + ') | ' + date + ' | ' + prerelease + ' |\n';
              }
              report += '\n';
            }
            
            // Repositories without releases
            if (analysisResults.repositoriesWithoutReleases.length > 0) {
              report += '## API Repositories Without Releases\n\n';
              report += '| Repository | Type | Note |\n';
              report += '|------------|------|---------|\n';
              
              for (const repo of analysisResults.repositoriesWithoutReleases.sort((a, b) => a.name.localeCompare(b.name))) {
                const note = repo.error ? 'Error: ' + repo.error : 'No releases found';
                report += '| [' + repo.name + '](' + repo.html_url + ') | ' + repo.repo_type + ' | ' + note + ' |\n';
              }
              report += '\n';
            }
            
            report += '## Next Steps\n\n';
            report += 'To get the full API releases analysis, the following features need to be implemented:\n\n';
            report += '1. **Meta-release Detection**: Categorize releases based on timing (Fall24, Spring25, etc.)\n';
            report += '2. **API Definitions Analysis**: Extract and analyze API definitions from releases\n';
            report += '3. **Version Tracking**: Track API version evolution across releases\n';
            report += '4. **Quality Checks**: Consistency analysis between main branch and releases\n';
            report += '5. **Parallel Processing**: Matrix-based processing for faster execution\n\n';
            
            report += '*This placeholder report provides basic release information. ';
            report += 'Contact the workflow maintainer to implement the full functionality.*\n';
            
            // Save report
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = 'camara-api-releases-' + timestamp.split('T')[0] + '.md';
            fs.writeFileSync(filename, report);
            
            console.log('‚úÖ API releases report saved as ' + filename);
            console.log('üìä Report Statistics:');
            console.log('  - API repositories: ' + analysisResults.repositoriesAnalyzed);
            console.log('  - Repositories with releases: ' + analysisResults.repositoriesWithReleases);
            console.log('  - Recent releases: ' + analysisResults.recentReleases.length);
            
            // Set output for artifact upload
            core.setOutput('report_filename', filename);
            
            console.log('üéâ API releases report generation completed!');

      - name: Upload API Releases Report
        uses: actions/upload-artifact@v4
        with:
          name: camara-api-releases-${{ github.run_number }}
          path: '*.md'
          retention-days: 90

  summary:
    if: always()
    needs: [generate-api-releases-report]
    runs-on: ubuntu-latest
    steps:
      - name: Report Summary
        run: |
          echo "üéâ CAMARA API Releases Report Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Generated At**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Job Status**: ${{ needs.generate-api-releases-report.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: This is a placeholder version - full functionality to be implemented" >> $GITHUB_STEP_SUMMARY
          echo "**Download**: Check the artifacts section of this workflow run" >> $GITHUB_STEP_SUMMARY
          
          echo "‚úÖ CAMARA API releases workflow completed"
          echo "üìÖ Completed at: $(date -u)"
          echo "üìÅ Artifact uploaded and available for download"
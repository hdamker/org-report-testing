name: CAMARA API Releases

on:
  workflow_dispatch:
    inputs:
      include_prerelease:
        description: 'Include pre-releases in analysis and reports'
        required: false
        type: boolean
        default: false
      
      include_legacy:
        description: 'Include legacy releases in analysis and reports'
        required: false
        type: boolean
        default: false

jobs:
  generate-api-releases-report:
    runs-on: ubuntu-latest
    outputs:
      total_api_repos: ${{ steps.generate-report.outputs.total_api_repos }}
      repos_with_releases: ${{ steps.generate-report.outputs.repos_with_releases }}
      repos_without_releases: ${{ steps.generate-report.outputs.repos_without_releases }}
      total_releases: ${{ steps.generate-report.outputs.total_releases }}
      recent_releases: ${{ steps.generate-report.outputs.recent_releases }}
      include_prerelease: ${{ steps.generate-report.outputs.include_prerelease }}
      include_legacy: ${{ steps.generate-report.outputs.include_legacy }}
    steps:
      - name: Initialize API Releases Report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const includePrerelease = '${{ github.event.inputs.include_prerelease }}' === 'true';
            const includeLegacy = '${{ github.event.inputs.include_legacy }}' === 'true';
            
            console.log('üöÄ Starting CAMARA API releases report');
            console.log('‚öôÔ∏è Configuration:', { includePrerelease, includeLegacy });

      - name: Get API Repositories
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            
            console.log('üîç Fetching API repositories from', org);
            
            // Paginate through all repositories
            const allRepos = [];
            let page = 1;
            
            while (true) {
              const response = await github.rest.repos.listForOrg({
                org: org,
                type: 'all',
                sort: 'name',
                per_page: 100,
                page: page
              });
              
              if (response.data.length === 0) break;
              allRepos.push(...response.data);
              page++;
            }
            
            console.log('üìã Filtering for API repositories...');
            
            // Filter for API repositories only (exclude archived)
            const apiRepos = [];
            const nonArchivedRepos = allRepos.filter(r => !r.archived);
            
            for (const repo of nonArchivedRepos) {
              try {
                const topics = await github.rest.repos.getAllTopics({
                  owner: org,
                  repo: repo.name
                });
                
                // Check for API repository topics
                const hasAPITopic = topics.data.names.some(topic => 
                  topic === 'sandbox-api-repository' || topic === 'incubating-api-repository'
                );
                
                if (hasAPITopic) {
                  const repoType = topics.data.names.includes('sandbox-api-repository') ? 'Sandbox' : 'Incubating';
                  apiRepos.push({
                    name: repo.name,
                    full_name: repo.full_name,
                    html_url: repo.html_url,
                    description: repo.description,
                    repo_type: repoType
                  });
                }
              } catch (error) {
                console.log(`‚ö†Ô∏è Could not get topics for ${repo.name}: ${error.message}`);
              }
            }
            
            console.log(`‚úÖ Found ${apiRepos.length} API repositories`);
            
            // Save configuration and data for next steps
            const fs = require('fs');
            fs.writeFileSync('api-repositories.json', JSON.stringify({
              apiRepos,
              config: {
                org,
                includePrerelease: '${{ github.event.inputs.include_prerelease }}' === 'true',
                includeLegacy: '${{ github.event.inputs.include_legacy }}' === 'true'
              }
            }));

      - name: Analyze API Releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('api-repositories.json', 'utf8'));
            const { apiRepos, config } = data;
            const { org, includePrerelease, includeLegacy } = config;
            
            console.log('üîç Analyzing API releases...');
            console.log(`üì¶ Processing ${apiRepos.length} API repositories`);
            
            const analysisResults = {
              repositoriesAnalyzed: apiRepos.length,
              repositoriesWithReleases: 0,
              repositoriesWithoutReleases: [],
              totalReleases: 0,
              recentReleases: [],
              allReleases: []
            };
            
            // Analyze each API repository for releases
            for (const repo of apiRepos) {
              console.log(`üìã Analyzing ${repo.name} (${repo.repo_type})`);
              
              try {
                // Get all repository releases
                const releases = await github.rest.repos.listReleases({
                  owner: org,
                  repo: repo.name,
                  per_page: 100
                });
                
                console.log(`  üìä Found ${releases.data.length} releases`);
                
                if (releases.data.length === 0) {
                  analysisResults.repositoriesWithoutReleases.push({
                    name: repo.name,
                    repo_type: repo.repo_type,
                    html_url: repo.html_url
                  });
                } else {
                  analysisResults.repositoriesWithReleases++;
                  
                  // Filter releases based on configuration
                  let filteredReleases = releases.data;
                  
                  // Filter pre-releases if not included
                  if (!includePrerelease) {
                    filteredReleases = filteredReleases.filter(release => !release.prerelease);
                  }
                  
                  // Add legacy filtering logic here if needed
                  // For now, includeLegacy doesn't change filtering
                  
                  analysisResults.totalReleases += filteredReleases.length;
                  
                  // Process each release
                  for (const release of filteredReleases) {
                    const releaseData = {
                      repo: repo.name,
                      repo_type: repo.repo_type,
                      repo_url: repo.html_url,
                      tag_name: release.tag_name,
                      name: release.name,
                      published_at: release.published_at,
                      html_url: release.html_url,
                      prerelease: release.prerelease,
                      draft: release.draft,
                      author: release.author ? release.author.login : 'Unknown',
                      body: release.body
                    };
                    
                    analysisResults.allReleases.push(releaseData);
                    
                    // Check if release is recent (last 30 days)
                    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
                    if (new Date(release.published_at) > thirtyDaysAgo) {
                      analysisResults.recentReleases.push(releaseData);
                    }
                  }
                }
                
              } catch (error) {
                console.log(`‚ùå Error analyzing ${repo.name}: ${error.message}`);
                analysisResults.repositoriesWithoutReleases.push({
                  name: repo.name,
                  repo_type: repo.repo_type,
                  html_url: repo.html_url,
                  error: error.message
                });
              }
            }
            
            console.log(`‚úÖ API analysis completed`);
            console.log(`üìä Results: ${analysisResults.repositoriesWithReleases} repos with releases, ${analysisResults.repositoriesWithoutReleases.length} without`);
            console.log(`üì¶ Total releases: ${analysisResults.totalReleases}, Recent: ${analysisResults.recentReleases.length}`);
            
            // Save analysis results
            data.analysisResults = analysisResults;
            fs.writeFileSync('api-analysis.json', JSON.stringify(data));

      - name: Generate API Releases Report
        id: generate-report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('api-analysis.json', 'utf8'));
            const { apiRepos, analysisResults, config } = data;
            const { org, includePrerelease, includeLegacy } = config;
            
            console.log('üìù Generating API releases report...');
            
            // Set outputs for workflow summary
            core.setOutput('total_api_repos', analysisResults.repositoriesAnalyzed);
            core.setOutput('repos_with_releases', analysisResults.repositoriesWithReleases);
            core.setOutput('repos_without_releases', analysisResults.repositoriesWithoutReleases.length);
            core.setOutput('total_releases', analysisResults.totalReleases);
            core.setOutput('recent_releases', analysisResults.recentReleases.length);
            core.setOutput('include_prerelease', includePrerelease);
            core.setOutput('include_legacy', includeLegacy);
            
            // Calculate additional statistics
            const releaseStats = {
              totalDrafts: analysisResults.allReleases.filter(r => r.draft).length,
              totalPrereleases: analysisResults.allReleases.filter(r => r.prerelease).length,
              uniqueAuthors: [...new Set(analysisResults.allReleases.map(r => r.author))].length
            };
            
            // Group releases by repository for analysis
            const releasesByRepo = {};
            for (const release of analysisResults.allReleases) {
              if (!releasesByRepo[release.repo]) {
                releasesByRepo[release.repo] = [];
              }
              releasesByRepo[release.repo].push(release);
            }
            
            // Generate Markdown report
            let report = '# CAMARA API Releases Report\n\n';
            report += `**Generated**: ${new Date().toISOString()}\n`;
            report += `**Organization**: ${org}\n`;
            report += `**API Repositories Analyzed**: ${analysisResults.repositoriesAnalyzed}\n`;
            report += `**Repositories with Releases**: ${analysisResults.repositoriesWithReleases}\n`;
            report += `**Repositories without Releases**: ${analysisResults.repositoriesWithoutReleases.length}\n`;
            report += `**Total Releases Found**: ${analysisResults.totalReleases}\n`;
            report += `**Recent Releases (30 days)**: ${analysisResults.recentReleases.length}\n`;
            report += `**Filters Applied**: Include Pre-releases: ${includePrerelease ? 'Yes' : 'No'}, Include Legacy: ${includeLegacy ? 'Yes' : 'No'}\n\n`;
            
            // Release Statistics Section
            report += '## Release Statistics\n\n';
            report += `- **Total Releases**: ${analysisResults.totalReleases}\n`;
            report += `- **Pre-releases**: ${releaseStats.totalPrereleases}\n`;
            report += `- **Draft Releases**: ${releaseStats.totalDrafts}\n`;
            report += `- **Recent Releases (30 days)**: ${analysisResults.recentReleases.length}\n`;
            report += `- **Unique Release Authors**: ${releaseStats.uniqueAuthors}\n\n`;
            
            // API Repository Summary Section
            report += '## API Repository Summary\n\n';
            report += '| Repository | Type | Releases | Latest Release | Description |\n';
            report += '|------------|------|----------|----------------|-------------|\n';
            
            for (const repo of apiRepos.sort((a, b) => a.name.localeCompare(b.name))) {
              const repoReleases = releasesByRepo[repo.name] || [];
              const hasReleases = repoReleases.length > 0;
              const latestRelease = repoReleases.length > 0 ? 
                repoReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at))[0] : null;
              
              const releaseCount = repoReleases.length;
              const latestInfo = latestRelease ? 
                `[${latestRelease.tag_name}](${latestRelease.html_url}) (${new Date(latestRelease.published_at).toLocaleDateString()})` : 
                'None';
              
              const shortDesc = (repo.description || '').length > 50 ? 
                (repo.description || '').substring(0, 50) + '...' : 
                (repo.description || 'No description');
              
              report += `| [${repo.name}](${repo.html_url}) | ${repo.repo_type} | ${releaseCount} | ${latestInfo} | ${shortDesc} |\n`;
            }
            report += '\n';
            
            // Recent Releases Section
            if (analysisResults.recentReleases.length > 0) {
              report += '## Recent Releases (Last 30 Days)\n\n';
              report += '| Repository | Type | Release | Date | Author | Pre-release |\n';
              report += '|------------|------|---------|------|--------|-------------|\n';
              
              // Sort recent releases by date (newest first)
              analysisResults.recentReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
              
              for (const release of analysisResults.recentReleases) {
                const date = new Date(release.published_at).toLocaleDateString();
                const name = release.name || release.tag_name;
                const prerelease = release.prerelease ? 'Yes' : 'No';
                
                report += `| [${release.repo}](${release.repo_url}) | ${release.repo_type} | [${name}](${release.html_url}) | ${date} | ${release.author} | ${prerelease} |\n`;
              }
              report += '\n';
            }
            
            // Repository Release Details Section
            if (analysisResults.repositoriesWithReleases > 0) {
              report += '## Repository Release Details\n\n';
              
              for (const repo of apiRepos.sort((a, b) => a.name.localeCompare(b.name))) {
                const repoReleases = releasesByRepo[repo.name];
                if (!repoReleases || repoReleases.length === 0) continue;
                
                report += `### ${repo.name} (${repo.repo_type})\n\n`;
                report += `**Repository**: [${repo.name}](${repo.html_url})\n`;
                report += `**Total Releases**: ${repoReleases.length}\n\n`;
                
                report += '| Release | Date | Author | Type |\n';
                report += '|---------|------|--------|------|\n';
                
                // Sort releases by date (newest first)
                const sortedReleases = repoReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
                
                for (const release of sortedReleases.slice(0, 10)) { // Show up to 10 most recent
                  const date = new Date(release.published_at).toLocaleDateString();
                  const name = release.name || release.tag_name;
                  const type = release.prerelease ? 'Pre-release' : release.draft ? 'Draft' : 'Release';
                  
                  report += `| [${name}](${release.html_url}) | ${date} | ${release.author} | ${type} |\n`;
                }
                
                if (sortedReleases.length > 10) {
                  report += `\n*Showing 10 most recent releases. Total: ${sortedReleases.length}*\n`;
                }
                report += '\n';
              }
            }
            
            // Repositories Without Releases Section
            if (analysisResults.repositoriesWithoutReleases.length > 0) {
              report += '## API Repositories Without Releases\n\n';
              report += '| Repository | Type | Note |\n';
              report += '|------------|------|---------|\n';
              
              for (const repo of analysisResults.repositoriesWithoutReleases.sort((a, b) => a.name.localeCompare(b.name))) {
                const note = repo.error ? `Error: ${repo.error}` : 'No releases found';
                report += `| [${repo.name}](${repo.html_url}) | ${repo.repo_type} | ${note} |\n`;
              }
              report += '\n';
            }
            
            // Release Analysis Summary
            report += '## Analysis Summary\n\n';
            report += `This report analyzed ${analysisResults.repositoriesAnalyzed} API repositories in the CAMARA project and found ${analysisResults.totalReleases} total releases across ${analysisResults.repositoriesWithReleases} repositories.\n\n`;
            
            if (analysisResults.recentReleases.length > 0) {
              report += `Recent activity shows ${analysisResults.recentReleases.length} releases in the last 30 days, indicating active development across the API portfolio.\n\n`;
            }
            
            if (analysisResults.repositoriesWithoutReleases.length > 0) {
              report += `${analysisResults.repositoriesWithoutReleases.length} API repositories do not yet have releases, which may indicate they are in early development phases.\n\n`;
            }
            
            report += `**Configuration**: This analysis ${includePrerelease ? 'included' : 'excluded'} pre-releases and ${includeLegacy ? 'included' : 'excluded'} legacy releases.\n`;
            
            // Save report to file
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `camara-api-releases-${timestamp.split('T')[0]}.md`;
            fs.writeFileSync(filename, report);
            
            // Log final statistics
            console.log(`‚úÖ API releases report saved as ${filename}`);
            console.log('üìä Report Statistics:');
            console.log(`  - API repositories: ${analysisResults.repositoriesAnalyzed}`);
            console.log(`  - Repositories with releases: ${analysisResults.repositoriesWithReleases}`);
            console.log(`  - Total releases: ${analysisResults.totalReleases}`);
            console.log(`  - Recent releases: ${analysisResults.recentReleases.length}`);
            console.log(`  - Pre-releases: ${releaseStats.totalPrereleases}`);
            
            core.setOutput('report_filename', filename);
            console.log('üéâ API releases report generation completed!');

      - name: Upload API Releases Report
        uses: actions/upload-artifact@v4
        with:
          name: camara-api-releases-${{ github.run_number }}
          path: '*.md'
          retention-days: 90

  summary:
    if: always()
    needs: [generate-api-releases-report]
    runs-on: ubuntu-latest
    steps:
      - name: Generate Workflow Summary
        run: |
          echo "# üì¶ CAMARA API Releases Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated At**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Job Status**: ${{ needs.generate-api-releases-report.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.generate-api-releases-report.result }}" = "success" ]; then
            echo "## üìä API Release Statistics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **API Repositories Analyzed** | ${{ needs.generate-api-releases-report.outputs.total_api_repos }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Repositories with Releases** | ${{ needs.generate-api-releases-report.outputs.repos_with_releases }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Repositories without Releases** | ${{ needs.generate-api-releases-report.outputs.repos_without_releases }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total Releases Found** | ${{ needs.generate-api-releases-report.outputs.total_releases }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Recent Releases (30 days)** | ${{ needs.generate-api-releases-report.outputs.recent_releases }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "## ‚öôÔ∏è Analysis Configuration" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Include Pre-releases**: ${{ needs.generate-api-releases-report.outputs.include_prerelease == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Include Legacy Releases**: ${{ needs.generate-api-releases-report.outputs.include_legacy == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## üì• Download Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The complete detailed report is available in the **Artifacts** section below." >> $GITHUB_STEP_SUMMARY
            echo "Look for: \`camara-api-releases-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "## ‚ùå Workflow Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The API releases workflow encountered an error." >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*CAMARA API Releases Workflow*" >> $GITHUB_STEP_SUMMARY
name: Generate CAMARA Project Reports

on:
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: true
        type: choice
        options:
          - 'repository-overview'
          - 'api-releases'
        default: 'repository-overview'
      
      include_archived:
        description: 'Include archived repositories'
        required: false
        type: boolean
        default: false
      
      detailed_activity:
        description: 'Include detailed activity analysis (slower but more accurate)'
        required: false
        type: boolean
        default: false
      
      template_compliance:
        description: 'Include template compliance checks for API repositories (repository-overview only)'
        required: false
        type: boolean
        default: false
      
      include_prerelease:
        description: 'Include pre-releases in analysis and reports'
        required: false
        type: boolean
        default: false
      
      include_legacy:
        description: 'Include legacy releases in analysis and reports'
        required: false
        type: boolean
        default: false

  schedule:
    # Run weekly on Mondays at 07:35 UTC
    - cron: '35 7 * * 1'

jobs:
  generate-report:
    runs-on: ubuntu-latest
    outputs:
      repository_groups: ${{ steps.get-api-repos.outputs.repository_groups }}
      total_repos: ${{ steps.get-api-repos.outputs.total_repos }}
      total_groups: ${{ steps.get-api-repos.outputs.total_groups }}
      report_filename: ${{ steps.generate-overview.outputs.report_filename }}
    steps:
      - name: Initialize Repository Overview Report
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        id: initialize
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const includeArchived = '${{ github.event.inputs.include_archived }}' === 'true';
            const detailedActivity = '${{ github.event.inputs.detailed_activity }}' === 'true';
            const checkTemplateCompliance = '${{ github.event.inputs.template_compliance }}' === 'true';
            
            console.log('üöÄ Starting CAMARA repository overview report for ' + org);
            console.log('üìÖ Report generation started at: ' + new Date().toISOString());
            console.log('‚öôÔ∏è Configuration: includeArchived=' + includeArchived + ', detailedActivity=' + detailedActivity + ', templateCompliance=' + checkTemplateCompliance);

      - name: Fetch All Repositories
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const includeArchived = '${{ github.event.inputs.include_archived }}' === 'true';
            
            console.log('üîç Step 1: Fetching all repositories from ' + org + '...');
            
            // Get all repositories
            let allRepos = [];
            let page = 1;
            
            while (true) {
              console.log('  üì• Fetching repositories page ' + page + '...');
              const response = await github.rest.repos.listForOrg({
                org: org,
                type: 'all',
                sort: 'name',
                per_page: 100,
                page: page
              });
              
              if (response.data.length === 0) break;
              console.log('  üìä Page ' + page + ': ' + response.data.length + ' repositories');
              allRepos = allRepos.concat(response.data);
              page++;
            }
            
            console.log('‚úÖ Step 1 Complete: Found ' + allRepos.length + ' total repositories');
            
            // Filter repositories
            const filteredRepos = includeArchived ? allRepos : allRepos.filter(r => !r.archived);
            console.log('üîç Processing ' + filteredRepos.length + ' repositories' + (includeArchived ? '' : ' (excluding archived)'));
            
            // Save for next step
            const fs = require('fs');
            fs.writeFileSync('repositories-data.json', JSON.stringify({
              filteredRepos: filteredRepos,
              allReposCount: allRepos.length,
              config: {
                org: org,
                includeArchived: includeArchived,
                detailedActivity: '${{ github.event.inputs.detailed_activity }}' === 'true',
                checkTemplateCompliance: '${{ github.event.inputs.template_compliance }}' === 'true'
              }
            }));

      - name: Process Repository Data
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('repositories-data.json', 'utf8'));
            const { filteredRepos, config } = data;
            const { org, detailedActivity } = config;
            
            // Helper function to determine repository type
            function getRepositoryType(topics) {
              if (topics.includes('sandbox-api-repository')) return 'Sandbox';
              if (topics.includes('incubating-api-repository')) return 'Incubating';
              if (topics.includes('workinggroup')) return 'Working Group';
              return 'Other';
            }
            
            console.log('üîç Step 2: Processing repository data...');
            if (detailedActivity) {
              console.log('‚ö†Ô∏è Detailed activity analysis enabled - this will take longer but provide more accurate activity dates');
            }
            
            // Process repositories in batches to avoid timeout
            const enrichedRepos = [];
            const batchSize = 10;
            
            for (let i = 0; i < filteredRepos.length; i += batchSize) {
              const batch = filteredRepos.slice(i, i + batchSize);
              console.log('üì¶ Processing batch ' + Math.floor(i/batchSize + 1) + ' (' + (i + 1) + '-' + Math.min(i + batchSize, filteredRepos.length) + ')...');
              
              for (const repo of batch) {
                try {
                  // Get repository topics
                  const topics = await github.rest.repos.getAllTopics({
                    owner: org,
                    repo: repo.name
                  });
                  
                  const repoType = getRepositoryType(topics.data.names);
                  
                  // Get open PRs count
                  const openPRsResponse = await github.rest.pulls.list({
                    owner: org,
                    repo: repo.name,
                    state: 'open',
                    per_page: 100
                  });
                  const openPRs = openPRsResponse.data.length;
                  
                  // Calculate open issues count
                  const openIssues = Math.max(0, (repo.open_issues_count || 0) - openPRs);
                  
                  enrichedRepos.push({
                    name: repo.name,
                    full_name: repo.full_name,
                    html_url: repo.html_url,
                    description: repo.description,
                    homepage: repo.homepage,
                    private: repo.private,
                    archived: repo.archived,
                    language: repo.language,
                    stargazers_count: repo.stargazers_count,
                    updated_at: repo.updated_at,
                    repo_type: repoType,
                    topics: topics.data.names,
                    open_issues_count: openIssues,
                    open_prs_count: openPRs,
                    last_activity_date: new Date(repo.updated_at),
                    simple_activity_date: new Date(repo.updated_at)
                  });
                  
                } catch (error) {
                  console.log('  ‚ùå Error processing ' + repo.name + ': ' + error.message);
                  // Add with minimal data if API calls fail
                  enrichedRepos.push({
                    name: repo.name,
                    full_name: repo.full_name,
                    html_url: repo.html_url,
                    description: repo.description,
                    homepage: repo.homepage,
                    private: repo.private,
                    archived: repo.archived,
                    language: repo.language,
                    stargazers_count: repo.stargazers_count,
                    updated_at: repo.updated_at,
                    repo_type: 'Other',
                    topics: [],
                    open_issues_count: repo.open_issues_count || 0,
                    open_prs_count: 0,
                    last_activity_date: new Date(repo.updated_at),
                    simple_activity_date: new Date(repo.updated_at)
                  });
                }
              }
            }
            
            console.log('‚úÖ Step 2 Complete: Repository processing finished');
            
            // Save enriched data
            data.enrichedRepos = enrichedRepos;
            fs.writeFileSync('enriched-repositories.json', JSON.stringify(data));

      - name: Check Template Compliance
        if: (github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule') && github.event.inputs.template_compliance == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('enriched-repositories.json', 'utf8'));
            let { enrichedRepos, config } = data;
            const { org } = config;
            
            console.log('üîç Checking template compliance for API repositories...');
            
            // Simple template compliance function
            function checkTemplateCompliance(repo, repoType) {
              const compliance = {
                templateUsed: true,
                violations: []
              };
              
              if (!['Sandbox', 'Incubating'].includes(repoType)) {
                return compliance;
              }
              
              const description = repo.description || '';
              
              // Check 1: Description should not contain "family" terms
              if (description.toLowerCase().includes('family')) {
                compliance.violations.push({
                  check: 'Family terms in description',
                  issue: 'Repository description contains prohibited terms "family" or "families"'
                });
                compliance.templateUsed = false;
              }
              
              // Check 2: Description format
              if (!description.startsWith(repoType)) {
                compliance.violations.push({
                  check: 'Description format',
                  issue: 'Repository description should start with "' + repoType + '". Current: "' + description + '"'
                });
                compliance.templateUsed = false;
              }
              
              // Check 3: Website URL
              if (!repo.homepage || !repo.homepage.startsWith('https://lf-camaraproject.atlassian.net/')) {
                compliance.violations.push({
                  check: 'Website URL',
                  issue: 'Website should point to "https://lf-camaraproject.atlassian.net/". Current: "' + (repo.homepage || 'No website') + '"'
                });
                compliance.templateUsed = false;
              }
              
              return compliance;
            }
            
            // Check compliance for API repositories
            for (let i = 0; i < enrichedRepos.length; i++) {
              const repo = enrichedRepos[i];
              if (['Sandbox', 'Incubating'].includes(repo.repo_type)) {
                console.log('üìã Checking compliance for ' + repo.name + ' (' + repo.repo_type + ')...');
                enrichedRepos[i].template_compliance = checkTemplateCompliance(repo, repo.repo_type);
                
                const passed = enrichedRepos[i].template_compliance.templateUsed;
                const violations = enrichedRepos[i].template_compliance.violations.length;
                console.log('  üìä ' + repo.name + ': ' + (passed ? '‚úÖ PASSED' : '‚ùå FAILED') + ' (' + violations + ' violations)');
              } else {
                enrichedRepos[i].template_compliance = { templateUsed: true, violations: [] };
              }
            }
            
            // Save updated data
            data.enrichedRepos = enrichedRepos;
            fs.writeFileSync('enriched-repositories.json', JSON.stringify(data));
            
            console.log('‚úÖ Template compliance checking completed');

      - name: Generate Final Report
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        id: generate-overview
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('enriched-repositories.json', 'utf8'));
            const { enrichedRepos, allReposCount, config } = data;
            const { org, includeArchived, detailedActivity, checkTemplateCompliance } = config;
            
            console.log('üìù Step 3: Generating comprehensive report...');
            
            // Generate report using string concatenation (safer than template literals)
            let report = '# CAMARA Project Repository Overview\n\n';
            report += '**Generated**: ' + new Date().toISOString() + '\n';
            report += '**Organization**: ' + org + '\n';
            report += '**Total Repositories**: ' + enrichedRepos.length + '\n';
            if (!includeArchived && allReposCount) {
              report += '**Archived Repositories Excluded**: ' + (allReposCount - enrichedRepos.length) + '\n';
            }
            report += '**Detailed Activity Analysis**: ' + (detailedActivity ? 'Enabled' : 'Disabled (using repository updated_at)') + '\n';
            report += '**Template Compliance Checks**: ' + (checkTemplateCompliance ? 'Enabled' : 'Disabled') + '\n';
            report += '\n';
            
            // Repository type statistics
            const typeStats = {
              'Sandbox': enrichedRepos.filter(r => r.repo_type === 'Sandbox').length,
              'Incubating': enrichedRepos.filter(r => r.repo_type === 'Incubating').length,
              'Working Group': enrichedRepos.filter(r => r.repo_type === 'Working Group').length,
              'Other': enrichedRepos.filter(r => r.repo_type === 'Other').length
            };
            
            // General statistics
            const stats = {
              total: enrichedRepos.length,
              public: enrichedRepos.filter(r => !r.private).length,
              private: enrichedRepos.filter(r => r.private).length,
              archived: enrichedRepos.filter(r => r.archived).length,
              forked: enrichedRepos.filter(r => r.fork).length,
              languages: [...new Set(enrichedRepos.map(r => r.language).filter(l => l))],
              totalOpenIssues: enrichedRepos.reduce((acc, r) => acc + r.open_issues_count, 0),
              totalOpenPRs: enrichedRepos.reduce((acc, r) => acc + r.open_prs_count, 0)
            };
            
            report += '## Repository Statistics\n\n';
            report += '### General Statistics\n';
            report += '- **Total Repositories**: ' + stats.total + '\n';
            report += '- **Public**: ' + stats.public + '\n';
            report += '- **Private**: ' + stats.private + '\n';
            if (stats.archived > 0) report += '- **Archived**: ' + stats.archived + '\n';
            report += '- **Programming Languages**: ' + stats.languages.length + ' (' + stats.languages.join(', ') + ')\n';
            report += '- **Total Open Issues**: ' + stats.totalOpenIssues + '\n';
            report += '- **Total Open Pull Requests**: ' + stats.totalOpenPRs + '\n\n';
            
            report += '### Repository Types\n';
            report += '- **Sandbox APIs**: ' + typeStats['Sandbox'] + '\n';
            report += '- **Incubating APIs**: ' + typeStats['Incubating'] + '\n';
            report += '- **Working Groups**: ' + typeStats['Working Group'] + '\n';
            report += '- **Other**: ' + typeStats['Other'] + '\n\n';
            
            // Template compliance analysis (only if enabled)
            const apiRepos = enrichedRepos.filter(r => ['Sandbox', 'Incubating'].includes(r.repo_type));
            if (checkTemplateCompliance && apiRepos.length > 0) {
              const compliantRepos = apiRepos.filter(r => r.template_compliance && r.template_compliance.templateUsed);
              const nonCompliantRepos = apiRepos.filter(r => r.template_compliance && !r.template_compliance.templateUsed);
              
              report += '## Template Compliance Analysis\n\n';
              report += '*Analysis of repository compliance with CAMARA templates*\n\n';
              
              report += '### Summary\n';
              report += '- **Total API Repositories**: ' + apiRepos.length + '\n';
              report += '- **Template Compliant**: ' + compliantRepos.length + ' ‚úÖ\n';
              report += '- **Template Non-Compliant**: ' + nonCompliantRepos.length + ' ‚ùå\n';
              report += '- **Compliance Rate**: ' + (apiRepos.length > 0 ? Math.round((compliantRepos.length / apiRepos.length) * 100) : 0) + '%\n\n';
              
              if (nonCompliantRepos.length > 0) {
                report += '### ‚ùå Template Compliance Issues\n\n';
                report += '| Repository | Type | Check | Issue |\n';
                report += '|------------|------|-------|-------|\n';
                
                for (const repo of nonCompliantRepos) {
                  if (repo.template_compliance && repo.template_compliance.violations) {
                    for (const violation of repo.template_compliance.violations) {
                      report += '| [' + repo.name + '](' + repo.html_url + ') | ' + repo.repo_type + ' | ' + violation.check + ' | ' + violation.issue + ' |\n';
                    }
                  }
                }
                report += '\n';
              }
            }
            
            // Top repositories by stars
            const topStarred = enrichedRepos
              .sort((a, b) => b.stargazers_count - a.stargazers_count)
              .slice(0, 10)
              .filter(r => r.stargazers_count > 0);
            
            if (topStarred.length > 0) {
              report += '## Top Repositories by Stars\n\n';
              report += '| Repository | Type | Stars | Language | Open Issues | Open PRs |\n';
              report += '|------------|------|-------|----------|-------------|----------|\n';
              
              for (const repo of topStarred) {
                const language = repo.language || 'N/A';
                report += '| [' + repo.name + '](' + repo.html_url + ') | ' + repo.repo_type + ' | ' + repo.stargazers_count + ' | ' + language + ' | ' + repo.open_issues_count + ' | ' + repo.open_prs_count + ' |\n';
              }
              report += '\n';
            }
            
            // Complete repository list grouped by type
            const reposByType = {
              'Working Group': enrichedRepos.filter(r => r.repo_type === 'Working Group').sort((a, b) => a.name.localeCompare(b.name)),
              'Incubating': enrichedRepos.filter(r => r.repo_type === 'Incubating').sort((a, b) => a.name.localeCompare(b.name)),
              'Sandbox': enrichedRepos.filter(r => r.repo_type === 'Sandbox').sort((a, b) => a.name.localeCompare(b.name)),
              'Other': enrichedRepos.filter(r => r.repo_type === 'Other').sort((a, b) => a.name.localeCompare(b.name))
            };
            
            report += '## Complete Repository List by Type\n\n';
            
            for (const [type, repos] of Object.entries(reposByType)) {
              if (repos.length === 0) continue;
              
              report += '### ' + type + ' Repositories (' + repos.length + ')\n\n';
              
              if (checkTemplateCompliance) {
                report += '| Repository | Visibility | Stars | Language | Open Issues | Open PRs | Template |\n';
                report += '|------------|------------|-------|----------|-------------|----------|----------|\n';
              } else {
                report += '| Repository | Visibility | Stars | Language | Open Issues | Open PRs |\n';
                report += '|------------|------------|-------|----------|-------------|----------|\n';
              }
              
              for (const repo of repos) {
                const visibility = repo.private ? 'Private' : 'Public';
                const stars = repo.stargazers_count;
                const language = repo.language || 'N/A';
                const isArchived = repo.archived ? ' üì¶' : '';
                
                let row = '| [' + repo.name + '](' + repo.html_url + ')' + isArchived + ' | ' + visibility + ' | ' + stars + ' | ' + language + ' | ' + repo.open_issues_count + ' | ' + repo.open_prs_count;
                
                if (checkTemplateCompliance) {
                  let templateStatus = 'N/A';
                  if (['Sandbox', 'Incubating'].includes(repo.repo_type)) {
                    templateStatus = (repo.template_compliance && repo.template_compliance.templateUsed) ? '‚úÖ' : '‚ùå';
                  }
                  row += ' | ' + templateStatus;
                }
                
                row += ' |\n';
                report += row;
              }
              report += '\n';
            }
            
            console.log('üíæ Saving report to file...');
            // Save report
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = 'camara-repository-overview-' + timestamp.split('T')[0] + '.md';
            fs.writeFileSync(filename, report);
            
            console.log('‚úÖ Repository overview report saved as ' + filename);
            
            // Set output for artifact upload
            core.setOutput('report_filename', filename);
            
            console.log('üéâ Repository overview report generation completed successfully!');
            console.log('‚è±Ô∏è Report generation finished at: ' + new Date().toISOString());

      # Simplified API releases placeholder (keeping existing structure but minimal for now)
      - name: Get API Repositories List
        if: github.event.inputs.report_type == 'api-releases'
        id: get-api-repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            console.log('API releases functionality - to be implemented after repository overview is working');
            core.setOutput('repository_groups', '[]');
            core.setOutput('total_repos', '0');
            core.setOutput('total_groups', '0');

      - name: Upload Repository Overview Reports
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        uses: actions/upload-artifact@v4
        with:
          name: camara-project-report-${{ github.event.inputs.report_type || 'repository-overview' }}-${{ github.run_number }}
          path: '*.md'
          retention-days: 90

  final-summary:
    if: always()
    needs: [generate-report]
    runs-on: ubuntu-latest
    steps:
      - name: Final Summary
        run: |
          echo "‚úÖ CAMARA project report generation workflow completed"
          echo "üìä Report type: ${{ github.event.inputs.report_type || 'repository-overview' }}"
          echo "üìÖ Completed at: $(date -u)"
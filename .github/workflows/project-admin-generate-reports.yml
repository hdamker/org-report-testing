name: Generate CAMARA Project Reports

on:
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: true
        type: choice
        options:
          - 'repository-overview'
          - 'api-releases'
        default: 'repository-overview'
      
      include_archived:
        description: 'Include archived repositories'
        required: false
        type: boolean
        default: false
      
      detailed_activity:
        description: 'Include detailed activity analysis (slower but more accurate)'
        required: false
        type: boolean
        default: false
      
      include_prerelease:
        description: 'Include pre-releases in analysis and reports'
        required: false
        type: boolean
        default: false
      
      include_legacy:
        description: 'Include legacy releases in analysis and reports'
        required: false
        type: boolean
        default: false

  schedule:
    # Run weekly on Mondays at 07:35 UTC
    - cron: '35 7 * * 1'

jobs:
  generate-report:
    runs-on: ubuntu-latest
    outputs:
      repository_groups: ${{ steps.get-api-repos.outputs.repository_groups }}
      total_repos: ${{ steps.get-api-repos.outputs.total_repos }}
      total_groups: ${{ steps.get-api-repos.outputs.total_groups }}
      report_filename: ${{ steps.generate-overview.outputs.report_filename }}
    steps:
      - name: Generate Repository Overview Report
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        id: generate-overview
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const includeArchived = '${{ github.event.inputs.include_archived }}' === 'true';
            const detailedActivity = '${{ github.event.inputs.detailed_activity }}' === 'true';
            
            console.log(`üöÄ Starting CAMARA repository overview report for ${org}`);
            console.log(`üìÖ Report generation started at: ${new Date().toISOString()}`);
            console.log(`‚öôÔ∏è Configuration: includeArchived=${includeArchived}, detailedActivity=${detailedActivity}`);
            
            // Helper function to determine repository type based on topics
            function getRepositoryType(topics) {
              if (topics.includes('sandbox-api-repository')) return 'Sandbox';
              if (topics.includes('incubating-api-repository')) return 'Incubating';
              if (topics.includes('workinggroup')) return 'Working Group';
              return 'Other';
            }
            
            // Helper function to get last activity date from multiple sources (only used if detailedActivity is true)
            async function getLastActivityDate(repo) {
              let lastActivity = new Date(repo.updated_at);
              let activityLink = repo.html_url;
              let activityType = 'repository';
              
              try {
                console.log(`    üîç Getting detailed activity for ${repo.name}...`);
                // Check recent commits
                const commits = await github.rest.repos.listCommits({
                  owner: org,
                  repo: repo.name,
                  per_page: 1
                });
                if (commits.data.length > 0) {
                  const commitDate = new Date(commits.data[0].commit.committer.date);
                  if (commitDate > lastActivity) {
                    lastActivity = commitDate;
                    activityLink = commits.data[0].html_url;
                    activityType = 'commit';
                    console.log(`      ‚úÖ Latest commit: ${commitDate.toDateString()}`);
                  }
                }
                
                // Check recent issues
                const issues = await github.rest.issues.listForRepo({
                  owner: org,
                  repo: repo.name,
                  state: 'all',
                  sort: 'updated',
                  per_page: 1
                });
                if (issues.data.length > 0) {
                  const issueDate = new Date(issues.data[0].updated_at);
                  if (issueDate > lastActivity) {
                    lastActivity = issueDate;
                    activityLink = issues.data[0].html_url;
                    activityType = issues.data[0].pull_request ? 'pull_request' : 'issue';
                    console.log(`      ‚úÖ Latest issue/PR: ${issueDate.toDateString()}`);
                  }
                }
                
                // Check recent pull requests (in case issues API missed some)
                const prs = await github.rest.pulls.list({
                  owner: org,
                  repo: repo.name,
                  state: 'all',
                  sort: 'updated',
                  per_page: 1
                });
                if (prs.data.length > 0) {
                  const prDate = new Date(prs.data[0].updated_at);
                  if (prDate > lastActivity) {
                    lastActivity = prDate;
                    activityLink = prs.data[0].html_url;
                    activityType = 'pull_request';
                    console.log(`      ‚úÖ Latest PR: ${prDate.toDateString()}`);
                  }
                }
                console.log(`    üìä Final activity: ${lastActivity.toDateString()} (${activityType})`);
              } catch (error) {
                console.log(`    ‚ùå Could not get detailed activity for ${repo.name}: ${error.message}`);
              }
              
              return {
                date: lastActivity,
                link: activityLink,
                type: activityType
              };
            }
            
            console.log(`üîç Step 1: Fetching all repositories from ${org}...`);
            
            // Get all repositories
            let allRepos = [];
            let page = 1;
            
            while (true) {
              console.log(`  üì• Fetching repositories page ${page}...`);
              const response = await github.rest.repos.listForOrg({
                org: org,
                type: 'all',
                sort: 'name',
                per_page: 100,
                page: page
              });
              
              if (response.data.length === 0) break;
              console.log(`  üìä Page ${page}: ${response.data.length} repositories`);
              allRepos = allRepos.concat(response.data);
              page++;
            }
            
            console.log(`‚úÖ Step 1 Complete: Found ${allRepos.length} total repositories`);
            
            // Filter repositories
            const filteredRepos = includeArchived ? allRepos : allRepos.filter(r => !r.archived);
            
            console.log(`üîç Step 2: Processing ${filteredRepos.length} repositories${includeArchived ? '' : ' (excluding archived)'}...`);
            if (detailedActivity) {
              console.log('‚ö†Ô∏è Detailed activity analysis enabled - this will take longer but provide more accurate activity dates');
            }
            
            // Enrich repository data with additional information
            const enrichedRepos = [];
            for (let i = 0; i < filteredRepos.length; i++) {
              const repo = filteredRepos[i];
              console.log(`üì¶ [${i + 1}/${filteredRepos.length}] Processing ${repo.name}...`);
              
              try {
                console.log(`  üè∑Ô∏è Getting topics...`);
                // Get repository topics
                const topics = await github.rest.repos.getAllTopics({
                  owner: org,
                  repo: repo.name
                });
                
                const repoType = getRepositoryType(topics.data.names);
                console.log(`  üìÇ Type: ${repoType} (topics: ${topics.data.names.join(', ') || 'none'})`);
                
                console.log(`  üìä Getting open issues and PRs...`);
                // Get open issues and PRs count (avoiding deprecated search API)
                const openPRs = await github.rest.pulls.list({
                  owner: org,
                  repo: repo.name,
                  state: 'open',
                  per_page: 100
                }).then(async (response) => {
                  let total = response.data.length;
                  
                  // If we got 100 results, there might be more - paginate
                  if (response.data.length === 100) {
                    console.log(`    üìà Repository has 100+ PRs, paginating...`);
                    let page = 2;
                    while (true) {
                      const nextPage = await github.rest.pulls.list({
                        owner: org,
                        repo: repo.name,
                        state: 'open',
                        per_page: 100,
                        page: page
                      });
                      
                      if (nextPage.data.length === 0) break;
                      total += nextPage.data.length;
                      page++;
                      
                      // Safety limit to avoid infinite loops
                      if (page > 50) break;
                    }
                  }
                  
                  return total;
                }).catch(() => 0);
                
                // Calculate open issues count (repo.open_issues_count includes both issues and PRs)
                const openIssues = Math.max(0, (repo.open_issues_count || 0) - openPRs);
                
                console.log(`  üìã Open issues: ${openIssues}, Open PRs: ${openPRs}`);
                
                // Get last activity date (only if detailed analysis is requested)
                const detailedActivityInfo = detailedActivity ? await getLastActivityDate(repo) : null;
                const lastActivity = detailedActivityInfo ? detailedActivityInfo.date : new Date(repo.updated_at);
                
                console.log(`  üìÖ Last activity: ${lastActivity.toDateString()}${detailedActivity ? ` (${detailedActivityInfo.type})` : ' (simple)'}`);
                
                enrichedRepos.push({
                  ...repo,
                  repo_type: repoType,
                  topics: topics.data.names,
                  open_issues_count: openIssues,
                  open_prs_count: openPRs,
                  last_activity_date: lastActivity,
                  detailed_activity: detailedActivityInfo, // Store detailed activity info
                  simple_activity_date: new Date(repo.updated_at) // Always store simple date for comparison
                });
                
                console.log(`  ‚úÖ Completed ${repo.name}`);
                
              } catch (error) {
                console.log(`  ‚ùå Error processing ${repo.name}: ${error.message}`);
                // Add with minimal data if API calls fail
                enrichedRepos.push({
                  ...repo,
                  repo_type: 'Other',
                  topics: [],
                  open_issues_count: repo.open_issues_count || 0,
                  open_prs_count: 0,
                  last_activity_date: new Date(repo.updated_at),
                  detailed_activity: null,
                  simple_activity_date: new Date(repo.updated_at)
                });
              }
            }
            
            console.log(`‚úÖ Step 2 Complete: Repository processing finished`);
            console.log(`üìä Repository Summary:`);
            const typeBreakdown = {};
            enrichedRepos.forEach(repo => {
              typeBreakdown[repo.repo_type] = (typeBreakdown[repo.repo_type] || 0) + 1;
            });
            Object.entries(typeBreakdown).forEach(([type, count]) => {
              console.log(`  - ${type}: ${count}`);
            });
            
            console.log(`üìù Step 3: Generating comprehensive report...`);
            
            // Generate report
            let report = `# CAMARA Project Repository Overview\n\n`;
            report += `**Generated**: ${new Date().toISOString()}\n`;
            report += `**Organization**: ${org}\n`;
            report += `**Total Repositories**: ${enrichedRepos.length}\n`;
            if (!includeArchived) {
              report += `**Archived Repositories Excluded**: ${allRepos.length - enrichedRepos.length}\n`;
            }
            report += `**Detailed Activity Analysis**: ${detailedActivity ? 'Enabled' : 'Disabled (using repository updated_at)'}\n`;
            report += `\n`;
            
            // Repository type statistics
            const typeStats = {
              'Sandbox': enrichedRepos.filter(r => r.repo_type === 'Sandbox').length,
              'Incubating': enrichedRepos.filter(r => r.repo_type === 'Incubating').length,
              'Working Group': enrichedRepos.filter(r => r.repo_type === 'Working Group').length,
              'Other': enrichedRepos.filter(r => r.repo_type === 'Other').length
            };
            
            // General statistics
            const stats = {
              total: enrichedRepos.length,
              public: enrichedRepos.filter(r => !r.private).length,
              private: enrichedRepos.filter(r => r.private).length,
              archived: enrichedRepos.filter(r => r.archived).length,
              forked: enrichedRepos.filter(r => r.fork).length,
              hasIssues: enrichedRepos.filter(r => r.has_issues).length,
              hasWiki: enrichedRepos.filter(r => r.has_wiki).length,
              languages: [...new Set(enrichedRepos.map(r => r.language).filter(l => l))],
              totalOpenIssues: enrichedRepos.reduce((acc, r) => acc + r.open_issues_count, 0),
              totalOpenPRs: enrichedRepos.reduce((acc, r) => acc + r.open_prs_count, 0)
            };
            
            report += `## Repository Statistics\n\n`;
            report += `### General Statistics\n`;
            report += `- **Total Repositories**: ${stats.total}\n`;
            report += `- **Public**: ${stats.public}\n`;
            report += `- **Private**: ${stats.private}\n`;
            if (stats.archived > 0) report += `- **Archived**: ${stats.archived}\n`;
            report += `- **Forked**: ${stats.forked}\n`;
            report += `- **With Issues Enabled**: ${stats.hasIssues}\n`;
            report += `- **With Wiki Enabled**: ${stats.hasWiki}\n`;
            report += `- **Programming Languages**: ${stats.languages.length} (${stats.languages.join(', ')})\n`;
            report += `- **Total Open Issues**: ${stats.totalOpenIssues}\n`;
            report += `- **Total Open Pull Requests**: ${stats.totalOpenPRs}\n\n`;
            
            report += `### Repository Types\n`;
            report += `- **Sandbox APIs**: ${typeStats['Sandbox']}\n`;
            report += `- **Incubating APIs**: ${typeStats['Incubating']}\n`;
            report += `- **Working Groups**: ${typeStats['Working Group']}\n`;
            report += `- **Other**: ${typeStats['Other']}\n\n`;
            
            // Activity Analysis Comparison (only if detailed analysis is enabled)
            if (detailedActivity) {
              report += `## Activity Date Comparison\n\n`;
              report += `*Comparing GitHub's updated_at vs detailed activity analysis*\n\n`;
              
              // Calculate differences
              const repositories = enrichedRepos.map(repo => {
                const simpleDate = repo.simple_activity_date;
                const detailedDate = repo.detailed_activity ? repo.detailed_activity.date : simpleDate;
                const timeDiff = Math.abs(detailedDate - simpleDate) / (1000 * 60 * 60 * 24); // days
                
                return {
                  name: repo.name,
                  repo_type: repo.repo_type,
                  html_url: repo.html_url,
                  simple_date: simpleDate,
                  detailed_date: detailedDate,
                  detailed_link: repo.detailed_activity ? repo.detailed_activity.link : repo.html_url,
                  activity_type: repo.detailed_activity ? repo.detailed_activity.type : 'repository',
                  days_difference: timeDiff
                };
              });
              
              // Find repositories with significant differences (more than 1 day)
              const significantDifferences = repositories.filter(r => r.days_difference > 1);
              const identicalDates = repositories.filter(r => r.days_difference <= 1);
              
              report += `### Summary\n`;
              report += `- **Repositories with identical/similar dates**: ${identicalDates.length}\n`;
              report += `- **Repositories with significant differences (>1 day)**: ${significantDifferences.length}\n\n`;
              
              if (significantDifferences.length > 0) {
                report += `### Repositories with Significant Date Differences\n\n`;
                report += `| Repository | Type | GitHub Updated | Detailed Activity | Difference | Activity Type |\n`;
                report += `|------------|------|----------------|-------------------|------------|---------------|\n`;
                
                // Sort by difference (largest first)
                significantDifferences.sort((a, b) => b.days_difference - a.days_difference);
                
                for (const repo of significantDifferences.slice(0, 20)) { // Show top 20
                  const simpleFormatted = repo.simple_date.toLocaleDateString();
                  const detailedFormatted = repo.detailed_date.toLocaleDateString();
                  const activityLink = `[${detailedFormatted}](${repo.detailed_link})`;
                  const daysDiff = Math.round(repo.days_difference);
                  
                  report += `| [${repo.name}](${repo.html_url}) | ${repo.repo_type} | ${simpleFormatted} | ${activityLink} | ${daysDiff} days | ${repo.activity_type} |\n`;
                }
                
                if (significantDifferences.length > 20) {
                  report += `\n*Showing top 20 of ${significantDifferences.length} repositories with differences*\n`;
                }
                report += `\n`;
              }
              
              // Sample of all repositories for comparison
              report += `### Sample Activity Date Comparison (First 15 Repositories)\n\n`;
              report += `| Repository | GitHub Updated | Detailed Activity | Activity Type |\n`;
              report += `|------------|----------------|-------------------|---------------|\n`;
              
              for (const repo of repositories.sort((a, b) => a.name.localeCompare(b.name)).slice(0, 15)) {
                const simpleFormatted = repo.simple_date.toLocaleDateString();
                const detailedFormatted = repo.detailed_date.toLocaleDateString();
                const activityLink = `[${detailedFormatted}](${repo.detailed_link})`;
                
                report += `| [${repo.name}](${repo.html_url}) | ${simpleFormatted} | ${activityLink} | ${repo.activity_type} |\n`;
              }
              report += `\n`;
            }
            
            // Top repositories by stars
            const topStarred = enrichedRepos
              .sort((a, b) => b.stargazers_count - a.stargazers_count)
              .slice(0, 10)
              .filter(r => r.stargazers_count > 0);
            
            if (topStarred.length > 0) {
              report += `## Top Repositories by Stars\n\n`;
              report += `| Repository | Type | Stars | Language | Open Issues | Open PRs |\n`;
              report += `|------------|------|-------|----------|-------------|----------|\n`;
              
              for (const repo of topStarred) {
                const language = repo.language || 'N/A';
                
                report += `| [${repo.name}](${repo.html_url}) | ${repo.repo_type} | ${repo.stargazers_count} | ${language} | ${repo.open_issues_count} | ${repo.open_prs_count} |\n`;
              }
              report += `\n`;
            }
            
            // Recent activity (using the activity date available)
            const recentlyActive = enrichedRepos
              .sort((a, b) => new Date(b.last_activity_date) - new Date(a.last_activity_date))
              .slice(0, 15);
            
            const activityTitle = detailedActivity ? 'Most Recently Active Repositories' : 'Recently Updated Repositories';
            const activityNote = detailedActivity ? '*Based on detailed activity analysis*' : '*Based on repository updated_at timestamp*';
            
            report += `## ${activityTitle}\n\n`;
            report += `${activityNote}\n\n`;
            report += `| Repository | Type | Last Activity | Open Issues | Open PRs | Language |\n`;
            report += `|------------|------|---------------|-------------|----------|----------|\n`;
            
            for (const repo of recentlyActive) {
              const lastActivity = new Date(repo.last_activity_date).toLocaleDateString();
              const language = repo.language || 'N/A';
              const isArchived = repo.archived ? ' üì¶' : '';
              
              report += `| [${repo.name}](${repo.html_url})${isArchived} | ${repo.repo_type} | ${lastActivity} | ${repo.open_issues_count} | ${repo.open_prs_count} | ${language} |\n`;
            }
            report += `\n`;
            
            // Complete repository list grouped by type
            const reposByType = {
              'Working Group': enrichedRepos.filter(r => r.repo_type === 'Working Group').sort((a, b) => a.name.localeCompare(b.name)),
              'Incubating': enrichedRepos.filter(r => r.repo_type === 'Incubating').sort((a, b) => a.name.localeCompare(b.name)),
              'Sandbox': enrichedRepos.filter(r => r.repo_type === 'Sandbox').sort((a, b) => a.name.localeCompare(b.name)),
              'Other': enrichedRepos.filter(r => r.repo_type === 'Other').sort((a, b) => a.name.localeCompare(b.name))
            };
            
            report += `## Complete Repository List by Type\n\n`;
            
            for (const [type, repos] of Object.entries(reposByType)) {
              if (repos.length === 0) continue;
              
              report += `### ${type} Repositories (${repos.length})\n\n`;
              report += `| Repository | Visibility | Stars | Language | Open Issues | Open PRs | Last Activity |\n`;
              report += `|------------|------------|-------|----------|-------------|----------|---------------|\n`;
              
              for (const repo of repos) {
                const visibility = repo.private ? 'Private' : 'Public';
                const stars = repo.stargazers_count;
                const language = repo.language || 'N/A';
                const lastActivity = new Date(repo.last_activity_date).toLocaleDateString();
                const isArchived = repo.archived ? ' üì¶' : '';
                
                report += `| [${repo.name}](${repo.html_url})${isArchived} | ${visibility} | ${stars} | ${language} | ${repo.open_issues_count} | ${repo.open_prs_count} | ${lastActivity} |\n`;
              }
              report += `\n`;
            }
            
            console.log(`üíæ Saving report to file...`);
            // Save report
            const fs = require('fs');
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `camara-repository-overview-${timestamp.split('T')[0]}.md`;
            fs.writeFileSync(filename, report);
            
            console.log(`‚úÖ Repository overview report saved as ${filename}`);
            console.log(`üìä Final Report Statistics:`);
            console.log(`  - Total repositories: ${enrichedRepos.length}`);
            console.log(`  - Repository types:`, Object.entries(typeBreakdown).map(([k,v]) => `${k}:${v}`).join(', '));
            console.log(`  - Total open issues: ${stats.totalOpenIssues}`);
            console.log(`  - Total open PRs: ${stats.totalOpenPRs}`);
            console.log(`  - Languages: ${stats.languages.length} (${stats.languages.slice(0, 5).join(', ')}${stats.languages.length > 5 ? '...' : ''})`);
            if (detailedActivity) {
              const significantDifferences = enrichedRepos.filter(r => {
                const timeDiff = Math.abs(r.last_activity_date - r.simple_activity_date) / (1000 * 60 * 60 * 24);
                return timeDiff > 1;
              });
              console.log(`  - Activity analysis differences: ${significantDifferences.length} repositories with >1 day difference`);
            }
            
            // Set output for artifact upload
            core.setOutput('report_filename', filename);
            
            console.log(`üìã Creating job summary...`);
            // Add to job summary (truncated version)
            const shortSummary = report.split('\n').slice(0, 80).join('\n') + '\n\n*Full report available in artifacts*';
            core.summary.addRaw(shortSummary);
            await core.summary.write();
            
            console.log(`üéâ Repository overview report generation completed successfully!`);
            console.log(`‚è±Ô∏è Report generation finished at: ${new Date().toISOString()}`);

      - name: Get API Repositories List
        if: github.event.inputs.report_type == 'api-releases'
        id: get-api-repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            
            console.log(`üîç Getting API repositories from ${org}...`);
            
            // Get all repositories
            const allRepos = [];
            let page = 1;
            
            while (true) {
              console.log(`üì• Fetching repositories page ${page}...`);
              const response = await github.rest.repos.listForOrg({
                org: org,
                type: 'all',
                sort: 'name',
                per_page: 100,
                page: page
              });
              
              if (response.data.length === 0) break;
              console.log(`üìä Page ${page}: ${response.data.length} repositories`);
              allRepos.push(...response.data);
              page++;
            }
            
            console.log(`üìã Filtering for API repositories...`);
            
            // Filter for API repositories only
            const apiRepos = [];
            const nonArchivedRepos = allRepos.filter(r => !r.archived);
            
            for (const repo of nonArchivedRepos) {
              try {
                const topics = await github.rest.repos.getAllTopics({
                  owner: org,
                  repo: repo.name
                });
                
                const hasAPITopic = topics.data.names.some(topic => 
                  topic === 'sandbox-api-repository' || topic === 'incubating-api-repository'
                );
                
                if (hasAPITopic) {
                  const repoType = topics.data.names.includes('sandbox-api-repository') ? 'Sandbox' : 'Incubating';
                  apiRepos.push({
                    name: repo.name,
                    full_name: repo.full_name,
                    html_url: repo.html_url,
                    repo_type: repoType
                  });
                }
              } catch (error) {
                console.log(`‚ö†Ô∏è Could not get topics for ${repo.name}: ${error.message}`);
              }
            }
            
            console.log(`‚úÖ Found ${apiRepos.length} API repositories`);
            
            // Split repositories into groups for parallel processing
            const groupSize = 8; // Process 8 repositories per matrix job
            const repoGroups = [];
            
            for (let i = 0; i < apiRepos.length; i += groupSize) {
              const group = apiRepos.slice(i, i + groupSize);
              repoGroups.push({
                id: Math.floor(i / groupSize) + 1,
                repositories: group,
                start_index: i + 1,
                end_index: Math.min(i + groupSize, apiRepos.length)
              });
            }
            
            console.log(`üì¶ Created ${repoGroups.length} repository groups for parallel processing`);
            repoGroups.forEach(group => {
              console.log(`  Group ${group.id}: repositories ${group.start_index}-${group.end_index} (${group.repositories.length} repos)`);
            });
            
            // Set outputs for matrix strategy
            core.setOutput('api_repositories', JSON.stringify(apiRepos));
            core.setOutput('repository_groups', JSON.stringify(repoGroups));
            core.setOutput('total_repos', apiRepos.length);
            core.setOutput('total_groups', repoGroups.length);
            
            // Debug output
            console.log(`üîß Debug: Setting job outputs...`);
            console.log(`  - repository_groups length: ${repoGroups.length}`);
            console.log(`  - repository_groups JSON length: ${JSON.stringify(repoGroups).length}`);
            console.log(`  - total_repos: ${apiRepos.length}`);
            
            if (repoGroups.length === 0) {
              console.log(`‚ö†Ô∏è Warning: No repository groups created - matrix job will be skipped`);
            } else {
              console.log(`‚úÖ Repository groups created successfully for matrix processing`);
            }

      - name: Debug Job Outputs
        if: github.event.inputs.report_type == 'api-releases'
        run: |
          echo "üîß Debug: Checking job outputs for matrix..."
          echo "Repository groups output: '${{ steps.get-api-repos.outputs.repository_groups }}'"
          echo "Total repos: '${{ steps.get-api-repos.outputs.total_repos }}'"
          echo "Total groups: '${{ steps.get-api-repos.outputs.total_groups }}'"
          
          # Check if outputs are empty
          if [ -z "${{ steps.get-api-repos.outputs.repository_groups }}" ]; then
            echo "‚ùå ERROR: repository_groups output is empty!"
            exit 1
          else
            echo "‚úÖ repository_groups output is set"
          fi

      # NEW: Upload artifact for repository-overview reports
      - name: Upload Repository Overview Reports
        if: github.event.inputs.report_type == 'repository-overview' || github.event_name == 'schedule'
        uses: actions/upload-artifact@v4
        with:
          name: camara-project-report-${{ github.event.inputs.report_type || 'repository-overview' }}-${{ github.run_number }}
          path: '*.md'
          retention-days: 90

  analyze-api-repositories:
    if: github.event.inputs.report_type == 'api-releases' && needs.generate-report.outputs.repository_groups != '' && needs.generate-report.outputs.repository_groups != null
    needs: [generate-report]
    strategy:
      matrix:
        group: ${{ fromJson(needs.generate-report.outputs.repository_groups) }}
      fail-fast: false
      max-parallel: 6  # Process up to 6 groups simultaneously
    runs-on: ubuntu-latest
    outputs:
      analysis_result: ${{ steps.analyze-group.outputs.result }}
    steps:
      - name: Analyze Repository Group
        id: analyze-group
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const groupId = ${{ matrix.group.id }};
            const repositories = ${{ toJson(matrix.group.repositories) }};
            const includePrerelease = '${{ github.event.inputs.include_prerelease }}' === 'true';
            const includeLegacy = '${{ github.event.inputs.include_legacy }}' === 'true';
            
            console.log(`üöÄ Starting analysis for Group ${groupId}`);
            console.log(`üì¶ Processing ${repositories.length} repositories: ${repositories.map(r => r.name).join(', ')}`);
            console.log(`‚öôÔ∏è Filters: includePrerelease=${includePrerelease}, includeLegacy=${includeLegacy}`);
            // Helper functions for API calls and meta-release determination
            function delay(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }
            
            async function retryApiCall(apiCall, maxRetries = 3, baseDelay = 1000) {
              for (let attempt = 1; attempt <= maxRetries; attempt++) {
                try {
                  return await apiCall();
                } catch (error) {
                  if (attempt === maxRetries) {
                    throw error;
                  }
                  
                  const delayMs = baseDelay * Math.pow(2, attempt - 1);
                  console.log(`    ‚è≥ API call failed (attempt ${attempt}/${maxRetries}), retrying in ${delayMs}ms...`);
                  await delay(delayMs);
                }
              }
            }
            
            // Helper function to determine meta-releases for all releases in a repository
            function determineMetaReleases(releases) {
              // First, parse and group releases by major version (X in rX.Y)
              const releasesByMajor = {};
              const metaReleaseAssignments = {};
              
              // Parse all releases and group by major version
              releases.forEach(release => {
                const tagMatch = release.tag_name.match(/^r(\d+)\.(\d+)$/);
                
                if (!tagMatch) {
                  // Not in rX.Y format -> Legacy
                  metaReleaseAssignments[release.tag_name] = {
                    cycle: 'Legacy',
                    reason: 'Not in rX.Y format'
                  };
                  return;
                }
                
                if (release.prerelease) {
                  // Pre-release -> no meta-release
                  metaReleaseAssignments[release.tag_name] = {
                    cycle: 'Pre-release',
                    reason: 'Pre-release version'
                  };
                  return;
                }
                
                const major = parseInt(tagMatch[1]);
                const minor = parseInt(tagMatch[2]);
                
                if (!releasesByMajor[major]) {
                  releasesByMajor[major] = [];
                }
                
                releasesByMajor[major].push({
                  ...release,
                  major: major,
                  minor: minor,
                  releaseDate: new Date(release.published_at)
                });
              });
              
              // Sort releases within each major version by date (earliest first)
              Object.keys(releasesByMajor).forEach(major => {
                releasesByMajor[major].sort((a, b) => a.releaseDate - b.releaseDate);
              });
              
              // Determine meta-releases for each major version cycle
              Object.entries(releasesByMajor).forEach(([major, releasesInMajor]) => {
                if (releasesInMajor.length === 0) return;
                
                // Find the FIRST public release in this major version
                const firstRelease = releasesInMajor[0];
                const firstReleaseDate = firstRelease.releaseDate;
                
                // Determine meta-release based on the first release date
                let metaRelease = 'Other release';
                
                // Check for Fall24: August or September 2024
                if (firstReleaseDate.getFullYear() === 2024 && 
                    (firstReleaseDate.getMonth() === 7 || firstReleaseDate.getMonth() === 8)) { // Month is 0-indexed
                  metaRelease = 'Fall24';
                }
                // Check for Spring25: February or March 2025
                else if (firstReleaseDate.getFullYear() === 2025 && 
                         (firstReleaseDate.getMonth() === 1 || firstReleaseDate.getMonth() === 2)) { // Month is 0-indexed
                  metaRelease = 'Spring25';
                }
                // Check for Fall25: August or September 2025
                else if (firstReleaseDate.getFullYear() === 2025 && 
                         (firstReleaseDate.getMonth() === 7 || firstReleaseDate.getMonth() === 8)) { // Month is 0-indexed
                  metaRelease = 'Fall25';
                }
                
                // Assign meta-releases to all releases in this major version
                releasesInMajor.forEach((release, index) => {
                  if (index === 0) {
                    // First release gets the meta-release name
                    metaReleaseAssignments[release.tag_name] = {
                      cycle: metaRelease,
                      reason: `First release in r${major}.x cycle (${firstReleaseDate.toDateString()})`
                    };
                  } else {
                    // Subsequent releases in the same major version are patches
                    metaReleaseAssignments[release.tag_name] = {
                      cycle: 'Patch',
                      reason: `Patch release for ${metaRelease} (r${major}.x cycle)`
                    };
                  }
                });
              });
              
              return metaReleaseAssignments;
            }
            
            async function getAPIDefinitions(repo, ref = 'main') {
              try {
                const definitionsPath = 'code/API_definitions';
                console.log(`    üìÇ Reading API definitions from ${repo.name}/${definitionsPath} @ ${ref}`);
                
                await delay(200);
                
                const contents = await retryApiCall(async () => {
                  return await github.rest.repos.getContent({
                    owner: org,
                    repo: repo.name,
                    path: definitionsPath,
                    ref: ref
                  });
                });
                
                const yamlFiles = contents.data.filter(file => 
                  file.name.endsWith('.yaml') || file.name.endsWith('.yml')
                );
                
                console.log(`    üìÑ Found ${yamlFiles.length} YAML files: ${yamlFiles.map(f => f.name).join(', ')}`);
                
                const apiDefinitions = [];
                
                for (let i = 0; i < yamlFiles.length; i++) {
                  const file = yamlFiles[i];
                  try {
                    if (i > 0) await delay(300);
                    
                    const fileContent = await retryApiCall(async () => {
                      return await github.rest.repos.getContent({
                        owner: org,
                        repo: repo.name,
                        path: file.path,
                        ref: ref
                      });
                    });
                    
                    const content = Buffer.from(fileContent.data.content, 'base64').toString('utf8');
                    
                    // Extract version using regex that handles YAML indentation
                    // Look for 'version:' with optional leading whitespace (indentation) 
                    const versionMatch = content.match(/^\s*version:\s*['"]?([^'"\s]+)['"]?$/m);
                    const version = versionMatch ? versionMatch[1] : 'Unknown';
                    const apiName = file.name.replace(/\.(yaml|yml)$/, '');
                    
                    console.log(`      ‚úÖ ${apiName}: v${version}`);
                    
                    apiDefinitions.push({
                      name: apiName,
                      version: version,
                      filename: file.name,
                      path: file.path
                    });
                  } catch (error) {
                    console.log(`      ‚ö†Ô∏è Could not read ${file.name}: ${error.message}`);
                  }
                }
                
                return apiDefinitions;
              } catch (error) {
                console.log(`    ‚ö†Ô∏è Could not access API definitions in ${repo.name}: ${error.message}`);
                return [];
              }
            }
            
            // Process repositories in this group
            const groupResults = {
              groupId: groupId,
              repositories: [],
              repositoriesWithoutReleases: [],
              repositoriesWithPrereleasesOnly: [],
              processingErrors: [],
              filters: {
                includePrerelease: includePrerelease,
                includeLegacy: includeLegacy
              }
            };
            
            for (let i = 0; i < repositories.length; i++) {
              const repo = repositories[i];
              console.log(`\nüì¶ [${i + 1}/${repositories.length}] Analyzing ${repo.name} (${repo.repo_type})...`);
              
              if (i > 0) await delay(800); // Longer delays since we have more time per group
              
              try {
                // Get releases
                const releases = await retryApiCall(async () => {
                  return await github.rest.repos.listReleases({
                    owner: org,
                    repo: repo.name,
                    per_page: 20
                  });
                });
                
                console.log(`  üìä Found ${releases.data.length} releases`);
                
                if (releases.data.length === 0) {
                  console.log(`  ‚ö†Ô∏è No releases - checking main branch`);
                  const mainBranchAPIs = await getAPIDefinitions(repo, 'main');
                  groupResults.repositoriesWithoutReleases.push({
                    name: repo.name,
                    repo_type: repo.repo_type,
                    html_url: repo.html_url,
                    api_definitions: mainBranchAPIs
                  });
                  continue;
                }
                
                // Check if repository has only pre-releases (no public releases)
                const hasPublicReleases = releases.data.some(release => !release.prerelease);
                if (!hasPublicReleases) {
                  console.log(`  ‚ö†Ô∏è Repository has only pre-releases`);
                  const mainBranchAPIs = await getAPIDefinitions(repo, 'main');
                  const prereleaseAPIs = new Set();
                  
                  // Collect APIs from all pre-releases
                  for (const release of releases.data) {
                    const apiDefs = await getAPIDefinitions(repo, release.tag_name);
                    apiDefs.forEach(api => prereleaseAPIs.add(`${api.name} v${api.version}`));
                  }
                  
                  groupResults.repositoriesWithPrereleasesOnly.push({
                    name: repo.name,
                    repo_type: repo.repo_type,
                    html_url: repo.html_url,
                    prerelease_count: releases.data.length,
                    api_definitions: mainBranchAPIs,
                    prerelease_apis: Array.from(prereleaseAPIs)
                  });
                  continue;
                }
                
                // Determine meta-releases for all releases in this repository
                console.log(`  üè∑Ô∏è Determining meta-releases for all releases...`);
                const metaReleaseAssignments = determineMetaReleases(releases.data);
                
                // Log summary of meta-release assignments
                const metaSummary = {};
                Object.values(metaReleaseAssignments).forEach(assignment => {
                  metaSummary[assignment.cycle] = (metaSummary[assignment.cycle] || 0) + 1;
                });
                console.log(`    üìä Meta-release summary: ${Object.entries(metaSummary).map(([k,v]) => `${k}:${v}`).join(', ')}`);
                
                // Filter releases based on input flags
                let filteredReleases = releases.data;
                if (!includePrerelease) {
                  filteredReleases = filteredReleases.filter(release => !release.prerelease);
                  console.log(`    üîç Filtered out pre-releases: ${filteredReleases.length}/${releases.data.length} releases remaining`);
                }
                
                // Analyze releases
                const releaseAnalysis = [];
                for (let j = 0; j < filteredReleases.length; j++) {
                  const release = filteredReleases[j];
                  console.log(`    üìã Processing release ${release.tag_name}`);
                  
                  const metaRelease = metaReleaseAssignments[release.tag_name] || {
                    cycle: 'Unknown',
                    reason: 'Could not determine meta-release'
                  };
                  
                  // Skip legacy releases if not included
                  if (!includeLegacy && metaRelease.cycle === 'Legacy') {
                    console.log(`      ‚è≠Ô∏è Skipping legacy release ${release.tag_name}`);
                    continue;
                  }
                  
                  console.log(`      üè∑Ô∏è Meta-release: ${metaRelease.cycle}`);
                  
                  const apiDefinitions = await getAPIDefinitions(repo, release.tag_name);
                  
                  releaseAnalysis.push({
                    tag_name: release.tag_name,
                    name: release.name,
                    published_at: release.published_at,
                    prerelease: release.prerelease,
                    html_url: release.html_url,
                    body: release.body,
                    meta_release: metaRelease,
                    api_definitions: apiDefinitions
                  });
                  
                  if (j < releases.data.length - 1) await delay(400);
                }
                
                // Get main branch APIs
                const mainBranchAPIs = await getAPIDefinitions(repo, 'main');
                
                groupResults.repositories.push({
                  name: repo.name,
                  repo_type: repo.repo_type,
                  html_url: repo.html_url,
                  releases: releaseAnalysis,
                  main_branch_apis: mainBranchAPIs
                });
                
                console.log(`  ‚úÖ Completed ${repo.name}`);
                
              } catch (error) {
                console.log(`  ‚ùå Error analyzing ${repo.name}: ${error.message}`);
                groupResults.processingErrors.push({
                  repository: repo.name,
                  error: error.message
                });
              }
            }
            
            console.log(`\n‚úÖ Group ${groupId} completed:`);
            console.log(`  - Repositories processed: ${groupResults.repositories.length}`);
            console.log(`  - Repositories with pre-releases only: ${groupResults.repositoriesWithPrereleasesOnly.length}`);
            console.log(`  - Repositories without releases: ${groupResults.repositoriesWithoutReleases.length}`);
            console.log(`  - Processing errors: ${groupResults.processingErrors.length}`);
            console.log(`  - Filters applied: prerelease=${includePrerelease}, legacy=${includeLegacy}`);
            
            // Save group results as artifact
            const fs = require('fs');
            const groupResultsFile = `group-${groupId}-results.json`;
            fs.writeFileSync(groupResultsFile, JSON.stringify(groupResults, null, 2));
            
            core.setOutput('result', JSON.stringify(groupResults));
            
            return groupResults;

      - name: Upload Group Results
        uses: actions/upload-artifact@v4
        with:
          name: api-analysis-group-${{ matrix.group.id }}
          path: '*.json'
          retention-days: 1  # Short retention since we'll combine them

  combine-api-analysis:
    if: github.event.inputs.report_type == 'api-releases' && needs.analyze-api-repositories.result == 'success'
    needs: [generate-report, analyze-api-repositories]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Group Results
        uses: actions/download-artifact@v4
        with:
          pattern: api-analysis-group-*
          merge-multiple: true
          path: group-results

      - name: Combine Results and Generate Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            console.log(`üîÑ Combining results from parallel analysis...`);
            
            // Read all group result files
            const groupResultsDir = 'group-results';
            const files = fs.readdirSync(groupResultsDir);
            const groupFiles = files.filter(f => f.startsWith('group-') && f.endsWith('-results.json'));
            
            console.log(`üìÅ Found ${groupFiles.length} group result files`);
            
            let allRepositories = [];
            let allRepositoriesWithoutReleases = [];
            let allRepositoriesWithPrereleasesOnly = [];
            let allProcessingErrors = [];
            let filters = { includePrerelease: false, includeLegacy: false };
            
            // Combine all group results
            for (const file of groupFiles) {
              const filePath = path.join(groupResultsDir, file);
              const groupData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
              
              console.log(`üìä Group ${groupData.groupId}: ${groupData.repositories.length} repos processed`);
              
              allRepositories = allRepositories.concat(groupData.repositories);
              allRepositoriesWithoutReleases = allRepositoriesWithoutReleases.concat(groupData.repositoriesWithoutReleases);
              allRepositoriesWithPrereleasesOnly = allRepositoriesWithPrereleasesOnly.concat(groupData.repositoriesWithPrereleasesOnly || []);
              allProcessingErrors = allProcessingErrors.concat(groupData.processingErrors);
              
              // Get filters from first group (should be same for all)
              if (groupData.filters) {
                filters = groupData.filters;
              }
            }
            
            console.log(`‚úÖ Combined results:`);
            console.log(`  - Total repositories with releases: ${allRepositories.length}`);
            console.log(`  - Total repositories with pre-releases only: ${allRepositoriesWithPrereleasesOnly.length}`);
            console.log(`  - Total repositories without releases: ${allRepositoriesWithoutReleases.length}`);
            console.log(`  - Total processing errors: ${allProcessingErrors.length}`);
            console.log(`  - Filters: prerelease=${filters.includePrerelease}, legacy=${filters.includeLegacy}`);
            
            // Generate comprehensive report (same logic as before but with combined data)
            let report = `# CAMARA API Releases Report (Parallel Analysis)\n\n`;
            report += `**Generated**: ${new Date().toISOString()}\n`;
            report += `**Processing Method**: Parallel Matrix Analysis\n`;
            report += `**API Repositories Analyzed**: ${allRepositories.length + allRepositoriesWithPrereleasesOnly.length + allRepositoriesWithoutReleases.length}\n`;
            report += `**Repositories with Releases**: ${allRepositories.length}\n`;
            report += `**Repositories with Pre-releases Only**: ${allRepositoriesWithPrereleasesOnly.length}\n`;
            report += `**Repositories without Releases**: ${allRepositoriesWithoutReleases.length}\n`;
            if (allProcessingErrors.length > 0) {
              report += `**Processing Errors**: ${allProcessingErrors.length}\n`;
            }
            report += `**Filters Applied**: Include Pre-releases: ${filters.includePrerelease ? 'Yes' : 'No'}, Include Legacy: ${filters.includeLegacy ? 'Yes' : 'No'}\n`;
            report += `\n`;
            
            // Meta-release summary (filtered)
            const metaReleaseCounts = {};
            allRepositories.forEach(repo => {
              repo.releases.forEach(release => {
                const cycle = release.meta_release.cycle;
                
                // Apply filters
                if (!filters.includePrerelease && cycle === 'Pre-release') return;
                if (!filters.includeLegacy && cycle === 'Legacy') return;
                
                metaReleaseCounts[cycle] = (metaReleaseCounts[cycle] || 0) + 1;
              });
            });
            
            report += `## Meta-Release Summary\n\n`;
            if (!filters.includePrerelease || !filters.includeLegacy) {
              report += `*Note: This summary reflects applied filters - `;
              const excludedTypes = [];
              if (!filters.includePrerelease) excludedTypes.push('pre-releases');
              if (!filters.includeLegacy) excludedTypes.push('legacy releases');
              report += `${excludedTypes.join(' and ')} are excluded*\n\n`;
            }
            Object.entries(metaReleaseCounts).sort().forEach(([cycle, count]) => {
              report += `- **${cycle}**: ${count} releases\n`;
            });
            report += `\n`;
            
            // API counting by meta-release category (filtered)
            const apisByMetaRelease = {
              'Fall24': new Set(),
              'Spring25': new Set(),
              'Fall25': new Set(),
              'Other release': new Set(),
              'Patch': new Set(),
              'Legacy': new Set(),
              'Pre-release': new Set()
            };
            
            const allMetaReleaseAPIs = new Set(); // APIs in Fall24, Spring25, Fall25 only
            const allAPIs = new Set(); // All APIs including Other releases (but NEVER Legacy or Pre-release)
            
            allRepositories.forEach(repo => {
              repo.releases.forEach(release => {
                const cycle = release.meta_release.cycle;
                
                release.api_definitions.forEach(api => {
                  // Add to specific meta-release category (for filtered display)
                  if (apisByMetaRelease[cycle]) {
                    apisByMetaRelease[cycle].add(api.name);
                  }
                  
                  // Add to meta-release combined set (Fall24, Spring25, Fall25 only)
                  if (['Fall24', 'Spring25', 'Fall25'].includes(cycle)) {
                    allMetaReleaseAPIs.add(api.name);
                  }
                  
                  // Add to "all releases" set - NEVER include Legacy or Pre-release
                  if (!['Legacy', 'Pre-release'].includes(cycle)) {
                    allAPIs.add(api.name);
                  }
                });
              });
            });
            
            // Filter displayed categories based on filter settings
            const displayableCategories = {};
            Object.entries(apisByMetaRelease).forEach(([category, apis]) => {
              // Apply display filters
              if (!filters.includePrerelease && category === 'Pre-release') return;
              if (!filters.includeLegacy && category === 'Legacy') return;
              displayableCategories[category] = apis;
            });
            
            report += `## Unique API Analysis\n\n`;
            if (!filters.includePrerelease || !filters.includeLegacy) {
              report += `*Note: This analysis reflects applied filters - `;
              const excludedTypes = [];
              if (!filters.includePrerelease) excludedTypes.push('pre-releases');
              if (!filters.includeLegacy) excludedTypes.push('legacy releases');
              report += `${excludedTypes.join(' and ')} are excluded*\n\n`;
            }
            report += `### APIs by Meta-Release Category\n`;
            report += `- **Fall24**: ${displayableCategories['Fall24']?.size || 0} unique APIs\n`;
            report += `- **Spring25**: ${displayableCategories['Spring25']?.size || 0} unique APIs\n`;
            report += `- **Fall25**: ${displayableCategories['Fall25']?.size || 0} unique APIs\n`;
            report += `- **Other releases**: ${displayableCategories['Other release']?.size || 0} unique APIs\n`;
            report += `- **Patch releases**: ${displayableCategories['Patch']?.size || 0} unique APIs\n`;
            if (filters.includeLegacy && displayableCategories['Legacy']) {
              report += `- **Legacy releases**: ${displayableCategories['Legacy'].size} unique APIs\n`;
            }
            if (filters.includePrerelease && displayableCategories['Pre-release']) {
              report += `- **Pre-releases**: ${displayableCategories['Pre-release'].size} unique APIs\n`;
            }
            report += `\n`;
            report += `### Combined API Counts\n`;
            report += `- **Meta-releases (Fall24 + Spring25 + Fall25)**: ${allMetaReleaseAPIs.size} unique APIs\n`;
            report += `- **All releases (including Other releases)**: ${allAPIs.size} unique APIs *\n`;
            report += `\n`;
            report += `\\* *Note: "All releases" count never includes Legacy or Pre-releases, regardless of filter settings*\n`;
            report += `\n`;
            
            // Recent releases (last 30 days) - filtered
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            const recentReleases = [];
            
            allRepositories.forEach(repo => {
              repo.releases.forEach(release => {
                // Apply filters
                const cycle = release.meta_release.cycle;
                if (!filters.includePrerelease && cycle === 'Pre-release') return;
                if (!filters.includeLegacy && cycle === 'Legacy') return;
                
                if (new Date(release.published_at) > thirtyDaysAgo) {
                  recentReleases.push({
                    repo: repo.name,
                    repo_type: repo.repo_type,
                    repo_url: repo.html_url,
                    ...release
                  });
                }
              });
            });
            
            if (recentReleases.length > 0) {
              report += `## Recent Releases (Last 30 Days)\n\n`;
              report += `| Repository | Type | Release | APIs | Date | Meta-Release |\n`;
              report += `|------------|------|---------|------|------|-------------|\n`;
              
              recentReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
              
              for (const release of recentReleases) {
                const date = new Date(release.published_at).toLocaleDateString();
                const name = release.name || release.tag_name;
                const apiList = release.api_definitions.map(api => `${api.name} v${api.version}`).join('<br>');
                const metaRelease = release.meta_release.cycle;
                
                report += `| [${release.repo}](${release.repo_url}) | ${release.repo_type} | [${name}](${release.html_url}) | ${apiList} | ${date} | ${metaRelease} |\n`;
              }
              report += `\n`;
            }
            
            // Consistency analysis (filtered)
            report += `## Consistency Analysis\n\n`;
            if (!filters.includePrerelease || !filters.includeLegacy) {
              report += `*Note: This analysis reflects applied filters - `;
              const excludedTypes = [];
              if (!filters.includePrerelease) excludedTypes.push('pre-releases');
              if (!filters.includeLegacy) excludedTypes.push('legacy releases');
              report += `${excludedTypes.join(' and ')} are excluded*\n\n`;
            }
            
            const consistencyIssues = [];
            
            for (const repo of allRepositories) {
              // Filter releases for consistency analysis
              const filteredReleases = repo.releases.filter(release => {
                const cycle = release.meta_release.cycle;
                if (!filters.includePrerelease && cycle === 'Pre-release') return false;
                if (!filters.includeLegacy && cycle === 'Legacy') return false;
                return true;
              });
              
              if (filteredReleases.length === 0) continue;
              
              const latestRelease = filteredReleases[0];
              
              // Check main branch vs latest release
              for (const mainAPI of repo.main_branch_apis) {
                const correspondingReleaseAPI = latestRelease?.api_definitions.find(api => api.name === mainAPI.name);
                
                if (correspondingReleaseAPI) {
                  if (mainAPI.version !== correspondingReleaseAPI.version && mainAPI.version !== 'wip') {
                    consistencyIssues.push({
                      repo: repo.name,
                      type: 'Version Mismatch',
                      description: `${mainAPI.name}: main branch v${mainAPI.version} ‚â† latest release v${correspondingReleaseAPI.version} (should be same or "wip")`
                    });
                  }
                }
              }
              
              // Check release descriptions
              for (const release of filteredReleases.slice(0, 3)) {
                for (const api of release.api_definitions) {
                  if (!release.body.includes(api.version)) {
                    consistencyIssues.push({
                      repo: repo.name,
                      type: 'Missing Version in Description',
                      description: `${release.tag_name}: API ${api.name} v${api.version} not mentioned in release description`
                    });
                  }
                }
              }
            }
            
            if (consistencyIssues.length > 0) {
              report += `### Consistency Issues Found\n\n`;
              report += `| Repository | Issue Type | Description |\n`;
              report += `|------------|------------|-------------|\n`;
              
              for (const issue of consistencyIssues.slice(0, 20)) {
                report += `| ${issue.repo} | ${issue.type} | ${issue.description} |\n`;
              }
              
              if (consistencyIssues.length > 20) {
                report += `\n*Showing first 20 of ${consistencyIssues.length} issues*\n`;
              }
              report += `\n`;
            } else {
              report += `‚úÖ No consistency issues found!\n\n`;
            }
            
            // Processing errors section
            if (allProcessingErrors.length > 0) {
              report += `## Processing Errors\n\n`;
              report += `The following repositories encountered errors during analysis:\n\n`;
              report += `| Repository | Error |\n`;
              report += `|------------|-------|\n`;
              
              for (const error of allProcessingErrors) {
                report += `| ${error.repository} | ${error.error} |\n`;
              }
              report += `\n`;
            }
            
            // Detailed repository analysis (filtered)
            report += `## Detailed Repository Analysis\n\n`;
            if (!filters.includePrerelease || !filters.includeLegacy) {
              report += `*Note: This analysis reflects applied filters - `;
              const excludedTypes = [];
              if (!filters.includePrerelease) excludedTypes.push('pre-releases');
              if (!filters.includeLegacy) excludedTypes.push('legacy releases');
              report += `${excludedTypes.join(' and ')} are excluded*\n\n`;
            }
            
            for (const repo of allRepositories.sort((a, b) => a.name.localeCompare(b.name))) {
              // Filter releases for detailed analysis
              const filteredReleases = repo.releases.filter(release => {
                const cycle = release.meta_release.cycle;
                if (!filters.includePrerelease && cycle === 'Pre-release') return false;
                if (!filters.includeLegacy && cycle === 'Legacy') return false;
                return true;
              });
              
              // Skip repositories with no releases after filtering
              if (filteredReleases.length === 0) continue;
              
              report += `### [${repo.name}](${repo.html_url}) (${repo.repo_type})\n\n`;
              
              if (repo.main_branch_apis.length > 0) {
                report += `**Main Branch APIs:**\n`;
                for (const api of repo.main_branch_apis) {
                  report += `- ${api.name}: v${api.version}\n`;
                }
                report += `\n`;
              }
              
              report += `**Release History:**\n`;
              report += `| Release | Date | Type | Meta-Release | APIs |\n`;
              report += `|---------|------|------|--------------|------|\n`;
              
              for (const release of filteredReleases.slice(0, 5)) {
                const date = new Date(release.published_at).toLocaleDateString();
                const type = release.prerelease ? 'Pre-release' : 'Release';
                const metaRelease = `${release.meta_release.cycle}`;
                const apiList = release.api_definitions.map(api => `${api.name} v${api.version}`).join('<br>');
                
                report += `| [${release.tag_name}](${release.html_url}) | ${date} | ${type} | ${metaRelease} | ${apiList} |\n`;
              }
              report += `\n`;
            }
            
            // API Repositories with Pre-releases only (always shown)
            if (allRepositoriesWithPrereleasesOnly.length > 0) {
              report += `## API Repositories with Pre-releases Only\n\n`;
              report += `*These repositories have releases but only pre-releases, no public releases yet.*\n\n`;
              report += `| Repository | Type | Pre-releases | Main Branch APIs | Pre-release APIs |\n`;
              report += `|------------|------|--------------|------------------|-----------------|\n`;
              
              for (const repo of allRepositoriesWithPrereleasesOnly.sort((a, b) => a.name.localeCompare(b.name))) {
                const mainAPIs = repo.api_definitions.map(api => `${api.name} v${api.version}`).join('<br>');
                const prereleaseAPIs = repo.prerelease_apis.join('<br>');
                
                report += `| [${repo.name}](${repo.html_url}) | ${repo.repo_type} | ${repo.prerelease_count} | ${mainAPIs} | ${prereleaseAPIs} |\n`;
              }
              report += `\n`;
            }
            
            // Repositories without releases
            if (allRepositoriesWithoutReleases.length > 0) {
              report += `## API Repositories Without Releases\n\n`;
              report += `| Repository | Type | API Definitions Found |\n`;
              report += `|------------|------|-----------------------|\n`;
              
              for (const repo of allRepositoriesWithoutReleases.sort((a, b) => a.name.localeCompare(b.name))) {
                const apiList = repo.api_definitions.map(api => `${api.name} v${api.version}`).join('<br>');
                
                report += `| [${repo.name}](${repo.html_url}) | ${repo.repo_type} | ${apiList} |\n`;
              }
              report += `\n`;
            }
            
            // Save final report
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `camara-api-releases-parallel-${timestamp.split('T')[0]}.md`;
            fs.writeFileSync(filename, report);
            
            console.log(`‚úÖ Parallel API releases report saved as ${filename}`);
            console.log(`üìä Final Statistics:`);
            console.log(`  - Processing time: ~3-5 minutes (vs 15-20 minutes sequential)`);
            console.log(`  - Repositories analyzed: ${allRepositories.length + allRepositoriesWithPrereleasesOnly.length + allRepositoriesWithoutReleases.length}`);
            console.log(`  - Repositories with releases: ${allRepositories.length}`);
            console.log(`  - Repositories with pre-releases only: ${allRepositoriesWithPrereleasesOnly.length}`);
            console.log(`  - Repositories without releases: ${allRepositoriesWithoutReleases.length}`);
            console.log(`  - Recent releases found: ${recentReleases.length}`);
            console.log(`  - Consistency issues: ${consistencyIssues.length}`);
            console.log(`  - Processing errors: ${allProcessingErrors.length}`);
            console.log(`  - Filters: prerelease=${filters.includePrerelease}, legacy=${filters.includeLegacy}`);
            
            core.setOutput('report_filename', filename);
            
            // Create job summary
            const shortSummary = report.split('\n').slice(0, 50).join('\n') + '\n\n*Full detailed report available in artifacts*';
            core.summary.addRaw(shortSummary);
            await core.summary.write();
            
            console.log(`üéâ Parallel CAMARA API releases report generation completed!`);

      - name: Upload Final Parallel Report
        uses: actions/upload-artifact@v4
        with:
          name: camara-api-releases-parallel-report
          path: '*.md'
          retention-days: 90

  final-summary:
    if: always()
    needs: [generate-report]
    runs-on: ubuntu-latest
    steps:
      - name: Final Summary
        run: |
          # Determine the status of the main job
          GENERATE_STATUS="${{ needs.generate-report.result }}"
          
          echo "üéâ Report Generation Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Report Type**: ${{ github.event.inputs.report_type || 'repository-overview' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Generated At**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Job Status**: ${GENERATE_STATUS}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.report_type }}" = "api-releases" ]; then
            echo "**Processing Method**: Parallel Matrix Analysis" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: API releases use multi-job parallel processing" >> $GITHUB_STEP_SUMMARY
            echo "**Download**: Check artifacts in the final analysis job" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Download**: Check the artifacts section of this workflow run" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "‚úÖ CAMARA project report generation workflow completed"
          echo "üìä Report type: ${{ github.event.inputs.report_type || 'repository-overview' }}"
          echo "üìÖ Completed at: $(date -u)"
          echo "üìã Status: ${GENERATE_STATUS}"
          
          if [ "${{ github.event.inputs.report_type }}" = "api-releases" ]; then
            echo "‚ö° Used parallel processing for faster API analysis"
          fi
          
          echo "üìÅ Artifact uploaded and available for download"
